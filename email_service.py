import os
import smtplib
import logging
import re
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import threading
import time
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class EmailConfig:
    smtp_server: str = os.getenv("SMTP_HOST", "smtp.gmail.com")
    smtp_port: int = int(os.getenv("SMTP_PORT", "587"))
    email: str = os.getenv("SMTP_EMAIL", os.getenv("SMTP_USER", ""))
    password: str = os.getenv("SMTP_PASSWORD", os.getenv("SMTP_PASS", ""))
    company_name: str = os.getenv("COMPANY_NAME", "C√¥ng ty ABC")
    company_email: str = os.getenv("COMPANY_EMAIL", os.getenv("SMTP_USER", "hr@company.com"))

class EmailService:
    def __init__(self):
        self.config = EmailConfig()
        self.validate_config()
        
    def validate_config(self):
        """X√°c th·ª±c c·∫•u h√¨nh email"""
        if not self.config.email or not self.config.password:
            logger.warning("Th√¥ng tin ƒëƒÉng nh·∫≠p email ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. T√≠nh nƒÉng email s·∫Ω b·ªã v√¥ hi·ªáu h√≥a.")
            return False
        return True
    
    def extract_email_from_cv_text(self, cv_text: str) -> Optional[str]:
        """Tr√≠ch xu·∫•t email t·ª´ vƒÉn b·∫£n CV s·ª≠ d·ª•ng regex"""
        try:
            # Pattern regex email n√¢ng cao
            email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
            emails = re.findall(email_pattern, cv_text)
            
            if emails:
                # Tr·∫£ v·ªÅ email h·ª£p l·ªá ƒë·∫ßu ti√™n ƒë∆∞·ª£c t√¨m th·∫•y
                for email in emails:
                    if self._is_valid_email(email):
                        return email.lower()
            
            return None
        except Exception as e:
            logger.error(f"L·ªói tr√≠ch xu·∫•t email t·ª´ CV: {e}")
            return None
    
    def _is_valid_email(self, email: str) -> bool:
        """X√°c th·ª±c ƒë·ªãnh d·∫°ng email"""
        pattern = r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$'
        return re.match(pattern, email) is not None
    
    def create_interview_invitation_email(self, candidate_name: str, position: str, 
                                        interview_date: str, cv_score: float) -> tuple:
        """T·∫°o email m·ªùi ph·ªèng v·∫•n b·∫±ng ti·∫øng Vi·ªát"""
        subject = f"Th∆∞ m·ªùi ph·ªèng v·∫•n v·ªã tr√≠ {position} - {self.config.company_name}"
        
        body = f"""
        K√≠nh ch√†o {candidate_name},

        Ch√∫ng t√¥i ƒë√£ xem x√©t h·ªì s∆° ·ª©ng tuy·ªÉn c·ªßa b·∫°n v√† r·∫•t ·∫•n t∆∞·ª£ng v·ªõi kinh nghi·ªám c≈©ng nh∆∞ k·ªπ nƒÉng m√† b·∫°n th·ªÉ hi·ªán trong CV.
        
        üìä K·∫øt qu·∫£ ƒë√°nh gi√° CV: {cv_score:.1f}/10 ƒëi·ªÉm
        
        V·ªõi ni·ªÅm vui, ch√∫ng t√¥i xin ƒë∆∞·ª£c m·ªùi b·∫°n tham gia bu·ªïi ph·ªèng v·∫•n cho v·ªã tr√≠ {position} t·∫°i {self.config.company_name}.
        
        üìÖ Th·ªùi gian d·ª± ki·∫øn ph·ªèng v·∫•n: {interview_date}
        üìç ƒê·ªãa ƒëi·ªÉm: S·∫Ω ƒë∆∞·ª£c th√¥ng b√°o chi ti·∫øt sau khi b·∫°n x√°c nh·∫≠n
        ‚è∞ Th·ªùi l∆∞·ª£ng: Kho·∫£ng 60-90 ph√∫t
        
        üîÑ C√ÅCH TH·ª®C PH·ªéNG V·∫§N:
        - Ph·ªèng v·∫•n tr·ª±c ti·∫øp ho·∫∑c online (s·∫Ω th√¥ng b√°o c·ª• th·ªÉ)
        - Bao g·ªìm: Ph·ªèng v·∫•n k·ªπ thu·∫≠t + Ph·ªèng v·∫•n HR
        - Mang theo: CV g·ªëc, b·∫±ng c·∫•p, ch·ª©ng ch·ªâ li√™n quan
        
        üìã CHU·∫®N B·ªä:
        - T√¨m hi·ªÉu v·ªÅ c√¥ng ty v√† v·ªã tr√≠ ·ª©ng tuy·ªÉn
        - Chu·∫©n b·ªã c√¢u tr·∫£ l·ªùi cho c√°c c√¢u h·ªèi v·ªÅ kinh nghi·ªám l√†m vi·ªác
        - Chu·∫©n b·ªã c√¢u h·ªèi mu·ªën t√¨m hi·ªÉu v·ªÅ c√¥ng ty/v·ªã tr√≠
        
        Vui l√≤ng ph·∫£n h·ªìi email n√†y tr∆∞·ªõc ng√†y {(datetime.now() + timedelta(days=3)).strftime('%d/%m/%Y')} ƒë·ªÉ x√°c nh·∫≠n tham gia ph·ªèng v·∫•n. N·∫øu th·ªùi gian kh√¥ng ph√π h·ª£p, xin vui l√≤ng ƒë·ªÅ xu·∫•t th·ªùi gian kh√°c.
        
        N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i qua:
        üìß Email: {self.config.company_email}
        üìû Hotline: [S·ªë ƒëi·ªán tho·∫°i c·ªßa c√¥ng ty]
        
        Ch√∫ng t√¥i r·∫•t mong ƒë∆∞·ª£c g·∫∑p b·∫°n!
        
        Tr√¢n tr·ªçng,
        Ph√≤ng Nh√¢n s·ª±
        {self.config.company_name}
        
        ---
        üí° L∆∞u √Ω: ƒê√¢y l√† email t·ª± ƒë·ªông ƒë∆∞·ª£c g·ª≠i t·ª´ H·ªá th·ªëng ƒê√°nh gi√° CV AI.
        N·∫øu b·∫°n nh·∫≠n nh·∫ßm email n√†y, vui l√≤ng b·ªè qua ho·∫∑c th√¥ng b√°o cho ch√∫ng t√¥i.
        """
        
        return subject, body
    
    def create_rejection_email(self, candidate_name: str, position: str, cv_score: float) -> tuple:
        """T·∫°o email t·ª´ ch·ªëi b·∫±ng ti·∫øng Vi·ªát"""
        subject = f"K·∫øt qu·∫£ ·ª©ng tuy·ªÉn v·ªã tr√≠ {position} - {self.config.company_name}"
        
        body = f"""
        K√≠nh ch√†o {candidate_name},

        Tr∆∞·ªõc ti√™n, ch√∫ng t√¥i xin ch√¢n th√†nh c·∫£m ∆°n b·∫°n ƒë√£ d√†nh th·ªùi gian quan t√¢m v√† ·ª©ng tuy·ªÉn v√†o v·ªã tr√≠ {position} t·∫°i {self.config.company_name}.
        
        Ch√∫ng t√¥i ƒë√£ xem x√©t k·ªπ l∆∞·ª°ng h·ªì s∆° c·ªßa b·∫°n v√† ƒë√°nh gi√° cao s·ª± nhi·ªát huy·∫øt c≈©ng nh∆∞ n·ªó l·ª±c m√† b·∫°n ƒë√£ th·ªÉ hi·ªán trong qu√° tr√¨nh ·ª©ng tuy·ªÉn.
        
        üìä K·∫øt qu·∫£ ƒë√°nh gi√° CV: {cv_score:.1f}/10 ƒëi·ªÉm
        
        Tuy nhi√™n, sau khi c√¢n nh·∫Øc c·∫©n th·∫≠n v√† so s√°nh v·ªõi c√°c ·ª©ng vi√™n kh√°c, ch√∫ng t√¥i quy·∫øt ƒë·ªãnh kh√¥ng th·ªÉ ti·∫øp t·ª•c v·ªõi h·ªì s∆° c·ªßa b·∫°n cho v·ªã tr√≠ n√†y l·∫ßn n√†y do:
        
        üîç PH√ÇN T√çCH:
        - H·ªì s∆° c·ªßa b·∫°n ch∆∞a ph√π h·ª£p ho√†n to√†n v·ªõi y√™u c·∫ßu c·ª• th·ªÉ c·ªßa v·ªã tr√≠ hi·ªán t·∫°i
        - Ch√∫ng t√¥i ƒëang t√¨m ki·∫øm ·ª©ng vi√™n c√≥ kinh nghi·ªám/k·ªπ nƒÉng chuy√™n bi·ªát h∆°n cho vai tr√≤ n√†y
        - S·ªë l∆∞·ª£ng ·ª©ng vi√™n ch·∫•t l∆∞·ª£ng cao v∆∞·ª£t qu√° s·ªë v·ªã tr√≠ tuy·ªÉn d·ª•ng
        
        üíº G·ª¢I √ù PH√ÅT TRI·ªÇN:
        - Ti·∫øp t·ª•c n√¢ng cao k·ªπ nƒÉng chuy√™n m√¥n trong lƒ©nh v·ª±c b·∫°n quan t√¢m
        - T√≠ch l≈©y th√™m kinh nghi·ªám th·ª±c t·∫ø qua c√°c d·ª± √°n/c√¥ng vi·ªác li√™n quan
        - C·∫≠p nh·∫≠t CV v·ªõi nh·ªØng th√†nh t·ª±u v√† k·ªπ nƒÉng m·ªõi nh·∫•t
        
        üåü C∆†H·ªòI T∆Ø∆†NG LAI:
        Ch√∫ng t√¥i s·∫Ω l∆∞u gi·ªØ th√¥ng tin c·ªßa b·∫°n trong h·ªá th·ªëng v√† s·∫Ω li√™n h·ªá khi c√≥ c∆° h·ªôi ph√π h·ª£p h∆°n v·ªõi kinh nghi·ªám c·ªßa b·∫°n trong t∆∞∆°ng lai.
        
        B·∫°n c≈©ng c√≥ th·ªÉ theo d√µi trang tuy·ªÉn d·ª•ng c·ªßa ch√∫ng t√¥i ƒë·ªÉ c·∫≠p nh·∫≠t c√°c v·ªã tr√≠ m·ªü m·ªõi:
        üåê Website: [Website c√¥ng ty]
        üì± LinkedIn: [LinkedIn c√¥ng ty]
        
        M·ªôt l·∫ßn n·ªØa, ch√∫ng t√¥i xin c·∫£m ∆°n s·ª± quan t√¢m c·ªßa b·∫°n v√† ch√∫c b·∫°n th√†nh c√¥ng trong vi·ªác t√¨m ki·∫øm c∆° h·ªôi ngh·ªÅ nghi·ªáp ph√π h·ª£p.
        
        Tr√¢n tr·ªçng,
        Ph√≤ng Nh√¢n s·ª±
        {self.config.company_name}
        Email: {self.config.company_email}
        
        ---
        üí° L∆∞u √Ω: ƒê√¢y l√† email t·ª± ƒë·ªông ƒë∆∞·ª£c g·ª≠i t·ª´ H·ªá th·ªëng ƒê√°nh gi√° CV AI.
        """
        
        return subject, body
    
    def create_follow_up_email(self, candidate_name: str, position: str, status: str) -> tuple:
        """T·∫°o email theo d√µi b·∫±ng ti·∫øng Vi·ªát"""
        subject = f"C·∫≠p nh·∫≠t ti·∫øn tr√¨nh ·ª©ng tuy·ªÉn v·ªã tr√≠ {position} - {self.config.company_name}"
        
        if status == "under_review":
            body = f"""
            K√≠nh ch√†o {candidate_name},
            
            Ch√∫ng t√¥i xin th√¥ng b√°o v·ªÅ t√¨nh tr·∫°ng h·ªì s∆° ·ª©ng tuy·ªÉn c·ªßa b·∫°n cho v·ªã tr√≠ {position}.
            
            üìã T√åNH TR·∫†NG HI·ªÜN T·∫†I: ƒêang xem x√©t
            
            H·ªì s∆° c·ªßa b·∫°n hi·ªán ƒëang ƒë∆∞·ª£c xem x√©t b·ªüi ƒë·ªôi ng≈© tuy·ªÉn d·ª•ng. Ch√∫ng t√¥i d·ª± ki·∫øn s·∫Ω c√≥ k·∫øt qu·∫£ trong v√≤ng 5-7 ng√†y l√†m vi·ªác t·ªõi.
            
            Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n ngay khi c√≥ k·∫øt qu·∫£ c·ª• th·ªÉ.
            
            C·∫£m ∆°n s·ª± ki√™n nh·∫´n c·ªßa b·∫°n!
            
            Tr√¢n tr·ªçng,
            Ph√≤ng Nh√¢n s·ª± - {self.config.company_name}
            """
        elif status == "next_round":
            body = f"""
            K√≠nh ch√†o {candidate_name},
            
            Ch√∫c m·ª´ng! B·∫°n ƒë√£ v∆∞·ª£t qua v√≤ng ƒë√°nh gi√° CV v√† ƒë∆∞·ª£c m·ªùi tham gia v√≤ng ti·∫øp theo.
            
            üéâ CH√öC M·ª™NG: V∆∞·ª£t qua v√≤ng s∆° tuy·ªÉn
            üìÖ V√íNG TI·∫æP THEO: S·∫Ω ƒë∆∞·ª£c th√¥ng b√°o chi ti·∫øt trong email ri√™ng
            
            Ch√∫ng t√¥i s·∫Ω g·ª≠i th√¥ng tin chi ti·∫øt v·ªÅ v√≤ng ti·∫øp theo trong email kh√°c.
            
            Tr√¢n tr·ªçng,
            Ph√≤ng Nh√¢n s·ª± - {self.config.company_name}
            """
        else:
            body = f"""
            K√≠nh ch√†o {candidate_name},
            
            C·∫£m ∆°n b·∫°n ƒë√£ ·ª©ng tuy·ªÉn v·ªã tr√≠ {position} t·∫°i {self.config.company_name}.
            
            Ch√∫ng t√¥i s·∫Ω c·∫≠p nh·∫≠t th√¥ng tin v·ªÅ ti·∫øn tr√¨nh tuy·ªÉn d·ª•ng s·ªõm nh·∫•t c√≥ th·ªÉ.
            
            Tr√¢n tr·ªçng,
            Ph√≤ng Nh√¢n s·ª± - {self.config.company_name}
            """
        
        return subject, body
    
    def send_email(self, to_email: str, subject: str, body: str) -> bool:
        """G·ª≠i email"""
        try:
            if not self.validate_config():
                logger.error("C·∫•u h√¨nh email kh√¥ng h·ª£p l·ªá")
                return False
            
            # T·∫°o th√¥ng ƒëi·ªáp
            msg = MIMEMultipart('alternative')
            msg['From'] = f"{self.config.company_name} <{self.config.email}>"
            msg['To'] = to_email
            msg['Subject'] = subject
            msg['Reply-To'] = self.config.company_email
            
            # Th√™m n·ªôi dung
            text_part = MIMEText(body, 'plain', 'utf-8')
            
            # T·∫°o phi√™n b·∫£n HTML ƒë∆°n gi·∫£n
            html_body = body.replace('\n', '<br>\n')
            html_body = f"""
            <html>
                <head>
                    <meta charset="utf-8">
                    <style>
                        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                        .header {{ background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 20px; }}
                        .content {{ padding: 20px; }}
                        .footer {{ background-color: #e9ecef; padding: 15px; border-radius: 5px; margin-top: 20px; font-size: 0.9em; }}
                    </style>
                </head>
                <body>
                    <div class="content">
                        {html_body}
                    </div>
                </body>
            </html>
            """
            
            html_part = MIMEText(html_body, 'html', 'utf-8')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # G·ª≠i email
            with smtplib.SMTP(self.config.smtp_server, self.config.smtp_port) as server:
                server.starttls()
                server.login(self.config.email, self.config.password)
                text = msg.as_string()
                server.sendmail(self.config.email, to_email, text)
            
            logger.info(f"Email ƒë√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn {to_email}")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i email ƒë·∫øn {to_email}: {e}")
            return False
    
    def schedule_interview_emails(self, qualified_candidates: List[Dict], position: str):
        """L√™n l·ªãch email m·ªùi ph·ªèng v·∫•n sau 2 tu·∫ßn"""
        try:
            # T√≠nh ng√†y ph·ªèng v·∫•n (2 tu·∫ßn t·ª´ b√¢y gi·ªù)
            interview_date = (datetime.now() + timedelta(weeks=2)).strftime("%d/%m/%Y")
            
            def send_delayed_emails():
                # Trong production, b·∫°n s·∫Ω s·ª≠ d·ª•ng task queue th√≠ch h·ª£p nh∆∞ Celery
                # ƒê·ªÉ demo, ch√∫ng ta s·∫Ω g·ª≠i ngay nh∆∞ng log l·ªãch tr√¨nh
                for candidate in qualified_candidates:
                    cv_text = candidate.get('extracted_text', '')
                    email = self.extract_email_from_cv_text(cv_text)
                    
                    if email:
                        candidate_name = self._extract_name_from_cv(cv_text)
                        subject, body = self.create_interview_invitation_email(
                            candidate_name, position, interview_date, candidate['score']
                        )
                        
                        success = self.send_email(email, subject, body)
                        if success:
                            logger.info(f"Email m·ªùi ph·ªèng v·∫•n ƒë√£ g·ª≠i ƒë·∫øn {email}")
                        else:
                            logger.error(f"G·ª≠i email m·ªùi ph·ªèng v·∫•n th·∫•t b·∫°i ƒë·∫øn {email}")
                    else:
                        logger.warning(f"Kh√¥ng t√¨m th·∫•y email trong CV: {candidate['filename']}")
            
            # Trong production, l√™n l·ªãch ƒëi·ªÅu n√†y sau 2 tu·∫ßn
            # ƒê·ªÉ demo, ch√∫ng ta s·∫Ω ch·∫°y n√≥ trong thread ri√™ng ngay l·∫≠p t·ª©c
            threading.Thread(target=send_delayed_emails, daemon=True).start()
            
            logger.info(f"ƒê√£ l√™n l·ªãch email ph·ªèng v·∫•n cho {len(qualified_candidates)} ·ª©ng vi√™n")
            
        except Exception as e:
            logger.error(f"L·ªói l√™n l·ªãch email ph·ªèng v·∫•n: {e}")
    
    def send_rejection_emails(self, rejected_candidates: List[Dict], position: str):
        """G·ª≠i email t·ª´ ch·ªëi ngay l·∫≠p t·ª©c"""
        try:
            def send_rejection_emails_async():
                for candidate in rejected_candidates:
                    cv_text = candidate.get('extracted_text', '')
                    email = self.extract_email_from_cv_text(cv_text)
                    
                    if email:
                        candidate_name = self._extract_name_from_cv(cv_text)
                        subject, body = self.create_rejection_email(
                            candidate_name, position, candidate['score']
                        )
                        
                        success = self.send_email(email, subject, body)
                        if success:
                            logger.info(f"Email t·ª´ ch·ªëi ƒë√£ g·ª≠i ƒë·∫øn {email}")
                        else:
                            logger.error(f"G·ª≠i email t·ª´ ch·ªëi th·∫•t b·∫°i ƒë·∫øn {email}")
                    else:
                        logger.warning(f"Kh√¥ng t√¨m th·∫•y email trong CV: {candidate['filename']}")
            
            # G·ª≠i email t·ª´ ch·ªëi ·ªü background
            threading.Thread(target=send_rejection_emails_async, daemon=True).start()
            
            logger.info(f"ƒêang g·ª≠i email t·ª´ ch·ªëi cho {len(rejected_candidates)} ·ª©ng vi√™n")
            
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i email t·ª´ ch·ªëi: {e}")
    
    def send_follow_up_emails(self, candidates: List[Dict], position: str, status: str):
        """G·ª≠i email theo d√µi"""
        try:
            def send_follow_up_emails_async():
                for candidate in candidates:
                    cv_text = candidate.get('extracted_text', '')
                    email = self.extract_email_from_cv_text(cv_text)
                    
                    if email:
                        candidate_name = self._extract_name_from_cv(cv_text)
                        subject, body = self.create_follow_up_email(
                            candidate_name, position, status
                        )
                        
                        success = self.send_email(email, subject, body)
                        if success:
                            logger.info(f"Email theo d√µi ƒë√£ g·ª≠i ƒë·∫øn {email}")
                        else:
                            logger.error(f"G·ª≠i email theo d√µi th·∫•t b·∫°i ƒë·∫øn {email}")
                    else:
                        logger.warning(f"Kh√¥ng t√¨m th·∫•y email trong CV: {candidate['filename']}")
            
            threading.Thread(target=send_follow_up_emails_async, daemon=True).start()
            
            logger.info(f"ƒêang g·ª≠i email theo d√µi cho {len(candidates)} ·ª©ng vi√™n")
            
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i email theo d√µi: {e}")
    
    def _extract_name_from_cv(self, cv_text: str) -> str:
        """Tr√≠ch xu·∫•t t√™n ·ª©ng vi√™n t·ª´ vƒÉn b·∫£n CV"""
        try:
            # Tr√≠ch xu·∫•t t√™n ƒë∆°n gi·∫£n - t√¨m ki·∫øm c√°c pattern ph·ªï bi·∫øn
            lines = cv_text.split('\n')
            
            # Ki·ªÉm tra v√†i d√≤ng ƒë·∫ßu cho pattern t√™n
            for i, line in enumerate(lines[:15]):  # TƒÉng l√™n 15 d√≤ng ƒë·ªÉ t√¨m t·ªët h∆°n
                line = line.strip()
                if line and len(line) < 60:  # T√™n th∆∞·ªùng ng·∫Øn
                    # B·ªè qua c√°c t·ª´ kh√≥a CV ph·ªï bi·∫øn
                    skip_keywords = [
                        'cv', 'resume', 'curriculum', 'vitae', 'h·ªì s∆°', 'th√¥ng tin', 'li√™n h·ªá', 'contact',
                        'email', 'phone', 'address', 'ƒë·ªãa ch·ªâ', 'ƒëi·ªán tho·∫°i', 'sinh nƒÉm', 'born',
                        'experience', 'kinh nghi·ªám', 'education', 'h·ªçc v·∫•n', 'skills', 'k·ªπ nƒÉng',
                        'objective', 'm·ª•c ti√™u', 'summary', 't√≥m t·∫Øt', 'profile', 'gi·ªõi thi·ªáu'
                    ]
                    
                    # Ki·ªÉm tra xem d√≤ng c√≥ ch·ª©a t·ª´ kh√≥a c·∫ßn b·ªè qua kh√¥ng
                    line_lower = line.lower()
                    has_skip_keyword = any(keyword in line_lower for keyword in skip_keywords)
                    
                    if not has_skip_keyword:
                        # Ki·ªÉm tra xem c√≥ gi·ªëng t√™n kh√¥ng (ch·ªâ ch·ª©a ch·ªØ c√°i, kho·∫£ng tr·∫Øng v√† m·ªôt s·ªë k√Ω t·ª± ti·∫øng Vi·ªát)
                        if re.match(r'^[a-zA-Z√Ä-·ªπƒÇƒÉ√Ç√¢ƒêƒëƒ®ƒ©≈®≈©∆†∆°∆Ø∆∞√Å√°√Ä√†·∫¢·∫£√É√£·∫†·∫°√Ç√¢·∫§·∫•·∫¶·∫ß·∫®·∫©·∫™·∫´·∫¨·∫≠ƒÇƒÉ·∫Æ·∫Ø·∫∞·∫±·∫≤·∫≥·∫¥·∫µ·∫∂·∫∑√â√©√à√®·∫∫·∫ª·∫º·∫Ω·∫∏·∫π√ä√™·∫æ·∫ø·ªÄ·ªÅ·ªÇ·ªÉ·ªÑ·ªÖ·ªÜ·ªá√ç√≠√å√¨·ªà·ªâƒ®ƒ©·ªä·ªã√ì√≥√í√≤·ªé·ªè√ï√µ·ªå·ªç√î√¥·ªê·ªë·ªí·ªì·ªî·ªï·ªñ·ªó·ªò·ªô∆†∆°·ªö·ªõ·ªú·ªù·ªû·ªü·ª†·ª°·ª¢·ª£√ö√∫√ô√π·ª¶·ªß≈®≈©·ª§·ª•∆Ø∆∞·ª®·ª©·ª™·ª´·ª¨·ª≠·ªÆ·ªØ·ª∞·ª±√ù√Ω·ª≤·ª≥·ª∂·ª∑·ª∏·ªπ·ª¥·ªµ\s\.-]+$', line):
                            words = line.split()
                            # T√™n th∆∞·ªùng c√≥ 2-4 t·ª´
                            if 2 <= len(words) <= 4:
                                # Ki·ªÉm tra xem c√≥ ph·∫£i s·ªë ƒëi·ªán tho·∫°i ho·∫∑c email kh√¥ng
                                if not re.search(r'[\d@]', line):
                                    return line.title()
            
            # N·∫øu kh√¥ng t√¨m th·∫•y t√™n, th·ª≠ t√¨m trong format "H·ªç t√™n:" ho·∫∑c "Name:"
            for line in lines[:20]:
                line = line.strip()
                # T√¨m pattern "H·ªç t√™n: Nguy·ªÖn VƒÉn A"
                name_patterns = [
                    r'h·ªç\s*t√™n\s*[:\-]\s*([a-zA-Z√Ä-·ªπƒÇƒÉ√Ç√¢ƒêƒëƒ®ƒ©≈®≈©∆†∆°∆Ø∆∞√Å√°√Ä√†·∫¢·∫£√É√£·∫†·∫°√Ç√¢·∫§·∫•·∫¶·∫ß·∫®·∫©·∫™·∫´·∫¨·∫≠ƒÇƒÉ·∫Æ·∫Ø·∫∞·∫±·∫≤·∫≥·∫¥·∫µ·∫∂·∫∑√â√©√à√®·∫∫·∫ª·∫º·∫Ω·∫∏·∫π√ä√™·∫æ·∫ø·ªÄ·ªÅ·ªÇ·ªÉ·ªÑ·ªÖ·ªÜ·ªá√ç√≠√å√¨·ªà·ªâƒ®ƒ©·ªä·ªã√ì√≥√í√≤·ªé·ªè√ï√µ·ªå·ªç√î√¥·ªê·ªë·ªí·ªì·ªî·ªï·ªñ·ªó·ªò·ªô∆†∆°·ªö·ªõ·ªú·ªù·ªû·ªü·ª†·ª°·ª¢·ª£√ö√∫√ô√π·ª¶·ªß≈®≈©·ª§·ª•∆Ø∆∞·ª®·ª©·ª™·ª´·ª¨·ª≠·ªÆ·ªØ·ª∞·ª±√ù√Ω·ª≤·ª≥·ª∂·ª∑·ª∏·ªπ·ª¥·ªµ\s]+)',
                    r'name\s*[:\-]\s*([a-zA-Z√Ä-·ªπƒÇƒÉ√Ç√¢ƒêƒëƒ®ƒ©≈®≈©∆†∆°∆Ø∆∞√Å√°√Ä√†·∫¢·∫£√É√£·∫†·∫°√Ç√¢·∫§·∫•·∫¶·∫ß·∫®·∫©·∫™·∫´·∫¨·∫≠ƒÇƒÉ·∫Æ·∫Ø·∫∞·∫±·∫≤·∫≥·∫¥·∫µ·∫∂·∫∑√â√©√à√®·∫∫·∫ª·∫º·∫Ω·∫∏·∫π√ä√™·∫æ·∫ø·ªÄ·ªÅ·ªÇ·ªÉ·ªÑ·ªÖ·ªÜ·ªá√ç√≠√å√¨·ªà·ªâƒ®ƒ©·ªä·ªã√ì√≥√í√≤·ªé·ªè√ï√µ·ªå·ªç√î√¥·ªê·ªë·ªí·ªì·ªî·ªï·ªñ·ªó·ªò·ªô∆†∆°·ªö·ªõ·ªú·ªù·ªû·ªü·ª†·ª°·ª¢·ª£√ö√∫√ô√π·ª¶·ªß≈®≈©·ª§·ª•∆Ø∆∞·ª®·ª©·ª™·ª´·ª¨·ª≠·ªÆ·ªØ·ª∞·ª±√ù√Ω·ª≤·ª≥·ª∂·ª∑·ª∏·ªπ·ª¥·ªµ\s]+)'
                ]
                
                for pattern in name_patterns:
                    match = re.search(pattern, line, re.IGNORECASE)
                    if match:
                        return match.group(1).strip().title()
            
            return "·ª®ng vi√™n"  # M·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y t√™n
            
        except Exception as e:
            logger.error(f"L·ªói tr√≠ch xu·∫•t t√™n t·ª´ CV: {e}")
            return "·ª®ng vi√™n"
    
    def test_email_connection(self) -> bool:
        """Ki·ªÉm tra k·∫øt n·ªëi m√°y ch·ªß email"""
        try:
            if not self.validate_config():
                return False
                
            with smtplib.SMTP(self.config.smtp_server, self.config.smtp_port) as server:
                server.starttls()
                server.login(self.config.email, self.config.password)
                logger.info("Ki·ªÉm tra k·∫øt n·ªëi email th√†nh c√¥ng")
                return True
                
        except Exception as e:
            logger.error(f"Ki·ªÉm tra k·∫øt n·ªëi email th·∫•t b·∫°i: {e}")
            return False

    def send_test_email(self, to_email: str) -> bool:
        """G·ª≠i email test"""
        try:
            subject = f"Email Test - H·ªá th·ªëng ƒê√°nh gi√° CV AI"
            body = f"""
            K√≠nh ch√†o,
            
            ƒê√¢y l√† email test t·ª´ H·ªá th·ªëng ƒê√°nh gi√° CV AI c·ªßa {self.config.company_name}.
            
            N·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y, nghƒ©a l√† h·ªá th·ªëng email ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.
            
            üéØ H·ªá th·ªëng: CV Evaluator AI
            üìÖ Th·ªùi gian test: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
            üè¢ C√¥ng ty: {self.config.company_name}
            
            Tr√¢n tr·ªçng,
            H·ªá th·ªëng ƒê√°nh gi√° CV AI
            """
            
            return self.send_email(to_email, subject, body)
            
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i email test: {e}")
            return False

    def create_bulk_email_report(self, sent_results: List[Dict]) -> str:
        """T·∫°o b√°o c√°o g·ª≠i email h√†ng lo·∫°t"""
        try:
            total = len(sent_results)
            successful = sum(1 for result in sent_results if result.get('success', False))
            failed = total - successful
            
            report = f"""
            üìä B√ÅO C√ÅO G·ª¨I EMAIL H√ÄNG LO·∫†T
            
            üìà TH·ªêNG K√ä T·ªîNG QUAN:
            - T·ªïng s·ªë email: {total}
            - G·ª≠i th√†nh c√¥ng: {successful} ({(successful/total*100):.1f}%)
            - G·ª≠i th·∫•t b·∫°i: {failed} ({(failed/total*100):.1f}%)
            
            üìß CHI TI·∫æT K·∫æT QU·∫¢:
            """
            
            for i, result in enumerate(sent_results, 1):
                status = "‚úÖ Th√†nh c√¥ng" if result.get('success', False) else "‚ùå Th·∫•t b·∫°i"
                email = result.get('email', 'N/A')
                candidate = result.get('candidate_name', 'N/A')
                error = result.get('error', '')
                
                report += f"\n{i}. {candidate} ({email}) - {status}"
                if error:
                    report += f" - L·ªói: {error}"
            
            report += f"""
            
            ‚è∞ Th·ªùi gian t·∫°o b√°o c√°o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
            üéØ H·ªá th·ªëng: CV Evaluator AI
            """
            
            return report
            
        except Exception as e:
            logger.error(f"L·ªói t·∫°o b√°o c√°o email: {e}")
            return f"L·ªói t·∫°o b√°o c√°o: {str(e)}"

# Instance to√†n c·ª•c
email_service = EmailService()