import streamlit as st
import os
import json
import logging
import time
from datetime import datetime
from typing import List, Dict, Any
from pathlib import Path
from openai import OpenAI

# Import local modules
from database import db_manager
from workflow import get_cv_workflow, cv_workflow
from gpt_evaluator import get_gpt_evaluator
from email_service import email_service
from gemini_ocr import gemini_ocr
from utils import (
    setup_directories, save_uploaded_file, get_file_info,
    validate_file_type, format_file_size, generate_session_id,
    format_score, get_pass_status_emoji, format_datetime, get_file_icon
)

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Streamlit Caching for Services
@st.cache_resource
def get_cached_workflow():
    """L·∫•y cached workflow instance"""
    return get_cv_workflow()

@st.cache_resource  
def get_cached_gpt_evaluator():
    """L·∫•y cached GPT evaluator instance"""
    return get_gpt_evaluator()

@st.cache_resource
def get_cached_email_service():
    """L·∫•y cached email service instance"""
    return email_service

# Page configuration
st.set_page_config(
    page_title="H·ªá th·ªëng ƒê√°nh gi√° CV b·∫±ng AI",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Professional CSS styling with Vietnamese support
st.markdown("""
<style>
    /* Import Professional Fonts with Vietnamese support */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=JetBrains+Mono:wght@400;500&family=Roboto:wght@300;400;500;700&display=swap');
    
    /* CSS Variables for Consistent Color Scheme */
    :root {
        /* Primary Colors */
        --primary-blue: #2563eb;
        --primary-blue-dark: #1d4ed8;
        --primary-blue-light: #3b82f6;
        
        /* Secondary Colors */
        --secondary-indigo: #4f46e5;
        --secondary-purple: #7c3aed;
        --secondary-teal: #0d9488;
        
        /* Neutral Colors */
        --gray-50: #f9fafb;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-300: #d1d5db;
        --gray-400: #9ca3af;
        --gray-500: #6b7280;
        --gray-600: #4b5563;
        --gray-700: #374151;
        --gray-800: #1f2937;
        --gray-900: #111827;
        
        /* Status Colors */
        --success: #10b981;
        --success-light: #34d399;
        --warning: #f59e0b;
        --warning-light: #fbbf24;
        --error: #ef4444;
        --error-light: #f87171;
        --info: #06b6d4;
        --info-light: #22d3ee;
        
        /* Background Colors */
        --bg-primary: #ffffff;
        --bg-secondary: #eceff4;
        --bg-tertiary: #f1f5f9;
        --bg-dark: #0f172a;
        --bg-dark-secondary: #1e293b;
        --bg-dark-tertiary: #334155;
        
        /* Text Colors */
        --text-primary: #0f172a;
        --text-secondary: #475569;
        --text-tertiary: #64748b;
        --text-light: #94a3b8;
        --text-white: #ffffff;
        
        /* Shadows */
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        
        /* Border Radius */
        --radius-sm: 6px;
        --radius-md: 8px;
        --radius-lg: 12px;
        --radius-xl: 16px;
        --radius-2xl: 24px;
    }
    
    /* Global Styles with Vietnamese font support */
    .stApp {
        font-family: 'Inter', 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        background: linear-gradient(to bottom, #141E30, #243B55);
        color: var(--text-primary);
        line-height: 1.6;
    }
    
    /* Remove default Streamlit styles */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    .stDeployButton {visibility: hidden;}
    
    /* Header - Modern & Professional */
    .app-header {
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        color: var(--text-white);
        padding: 3rem 2rem;
        text-align: center;
        margin: -1rem -1rem 2rem -1rem;
        box-shadow: var(--shadow-xl);
        position: relative;
        overflow: hidden;
    }
    
    .app-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E") repeat;
        opacity: 0.1;
    }
    
    .app-header h1 {
        font-size: 3rem;
        font-weight: 800;
        margin: 0 0 1rem 0;
        color: var(--text-white);
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: relative;
        z-index: 1;
    }
    
    .app-header p {
        font-size: 1.2rem;
        margin: 0;
        opacity: 0.95;
        font-weight: 400;
        color: rgba(255, 255, 255, 0.9);
        position: relative;
        z-index: 1;
    }
    
    /* Content Area */
    .content-area {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }
    
    /* Cards - Premium Design */
    .card {
        background: var(--bg-primary);
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--gray-200);
        padding: 2rem;
        margin-bottom: 2rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .card:hover {
        box-shadow: var(--shadow-xl);
        border-color: var(--primary-blue-light);
        transform: translateY(-4px);
    }
    
    .card:hover::before {
        opacity: 1;
    }
    
    .card-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid var(--gray-100);
    }
    
    .card-header h3 {
        margin: 0;
        color: var(--text-primary);
        font-weight: 700;
        font-size: 1.4rem;
        letter-spacing: -0.025em;
    }
    
    .card-icon {
        font-size: 1.5rem;
        margin-right: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        height: 48px;
        border-radius: var(--radius-lg);
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        color: var(--text-white);
        box-shadow: var(--shadow-md);
        position: relative;
    }
    
    .card-icon::before {
        content: '';
        position: absolute;
        inset: 0;
        border-radius: inherit;
        padding: 2px;
        background: linear-gradient(135deg, var(--primary-blue-light), var(--secondary-purple));
        mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
        mask-composite: exclude;
    }
    
    /* Chat Interface - Enhanced Readability */
    .chat-container {
        background: var(--bg-secondary);
        border-radius: var(--radius-lg);
        padding: 1.5rem;
        max-height: 600px;
        overflow-y: auto;
        border: 1px solid var(--gray-200);
        margin: 1rem 0;
        scrollbar-width: thin;
        scrollbar-color: var(--primary-blue-light) var(--gray-200);
    }
    
    .chat-container::-webkit-scrollbar {
        width: 8px;
    }
    
    .chat-container::-webkit-scrollbar-track {
        background: var(--gray-100);
        border-radius: var(--radius-md);
    }
    
    .chat-container::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        border-radius: var(--radius-md);
    }
    
    .chat-message {
        margin: 1.5rem 0;
        padding: 1.25rem 1.5rem;
        border-radius: var(--radius-lg);
        max-width: 85%;
        animation: slideInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        font-size: 0.95rem;
        line-height: 1.6;
        font-weight: 500;
        box-shadow: var(--shadow-md);
        position: relative;
    }
    
    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .system-message {
        background: linear-gradient(135deg, var(--success) 0%, var(--secondary-teal) 100%);
        color: var(--text-white);
        margin-right: auto;
        border-radius: var(--radius-lg) var(--radius-lg) var(--radius-lg) 6px;
    }
    
    .user-message {
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        color: var(--text-white);
        margin-left: auto;
        text-align: right;
        border-radius: var(--radius-lg) var(--radius-lg) 6px var(--radius-lg);
    }
    
    .result-message {
        background: linear-gradient(135deg, var(--info) 0%, var(--primary-blue-light) 100%);
        color: var(--text-white);
        margin-right: auto;
        border-radius: var(--radius-lg) var(--radius-lg) var(--radius-lg) 6px;
    }
    
    .error-message {
        background: linear-gradient(135deg, var(--error) 0%, #dc2626 100%);
        color: var(--text-white);
        margin-right: auto;
        border-radius: var(--radius-lg) var(--radius-lg) var(--radius-lg) 6px;
    }
    
    .summary-message {
        background: linear-gradient(135deg, var(--warning) 0%, var(--warning-light) 100%);
        color: var(--text-white);
        margin-right: auto;
        font-weight: 600;
        border-radius: var(--radius-lg) var(--radius-lg) var(--radius-lg) 6px;
    }
    
    /* Upload Area - Professional Design */
    .upload-area {
        border: 3px dashed var(--primary-blue-light);
        border-radius: var(--radius-xl);
        padding: 3rem 2rem;
        text-align: center;
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.05) 0%, rgba(79, 70, 229, 0.05) 100%);
        margin: 2rem 0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }
    
    .upload-area::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 50%);
        transform: translate(-50%, -50%);
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .upload-area:hover {
        border-color: var(--primary-blue);
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.08) 0%, rgba(79, 70, 229, 0.08) 100%);
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
    }
    
    .upload-area:hover::before {
        opacity: 1;
    }
    
    .upload-area h4 {
        color: var(--primary-blue);
        font-weight: 700;
        margin-bottom: 0.75rem;
        font-size: 1.5rem;
        position: relative;
        z-index: 1;
    }
    
    .upload-area p {
        color: var(--text-secondary);
        margin: 0;
        font-weight: 500;
        font-size: 1.1rem;
        position: relative;
        z-index: 1;
    }
    
    /* Buttons - Enhanced Design for Vietnamese text */
    .stButton button {
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%) !important;
        color: var(--text-white) !important;
        border: none !important;
        border-radius: var(--radius-md) !important;
        padding: 0.75rem 2rem !important;
        font-weight: 600 !important;
        font-size: 0.95rem !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
        box-shadow: var(--shadow-md) !important;
        position: relative !important;
        overflow: hidden !important;
        letter-spacing: 0.025em !important;
        white-space: nowrap !important;
        text-overflow: ellipsis !important;
        max-width: 100% !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        text-align: center !important;
        line-height: 1.2 !important;
        min-height: 44px !important;
    }
    
    .stButton button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
    }
    
    .stButton button:hover {
        background: linear-gradient(135deg, var(--primary-blue-dark) 0%, var(--secondary-purple) 100%) !important;
        box-shadow: var(--shadow-xl) !important;
        transform: translateY(-2px) !important;
    }
    
    .stButton button:hover::before {
        left: 100%;
    }
    
    /* Metrics - Professional Design */
    .metric-card {
        background: var(--bg-primary);
        border-radius: var(--radius-lg);
        padding: 2rem;
        text-align: center;
        border: 1px solid var(--gray-200);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: var(--shadow-md);
        position: relative;
        overflow: hidden;
    }
    
    .metric-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
    }
    
    .metric-card:hover {
        box-shadow: var(--shadow-xl);
        border-color: var(--primary-blue-light);
        transform: translateY(-4px);
    }
    
    .metric-value {
        font-size: 2.5rem;
        font-weight: 800;
        color: var(--primary-blue);
        margin-bottom: 0.5rem;
        font-family: 'JetBrains Mono', monospace;
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .metric-label {
        color: var(--text-secondary);
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.1em;
    }
    
    /* Feature Cards - Enhanced Design */
    .feature-card {
        color: black;
        background: var(--bg-primary);
        border-radius: var(--radius-xl);
        padding: 2.5rem;
        box-shadow: var(--shadow-lg);
        border: 1px solid var(--gray-200);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        height: 100%;
        position: relative;
        overflow: hidden;
    }
    
    .feature-card::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: conic-gradient(from 0deg, transparent, rgba(59, 130, 246, 0.1), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
        animation: rotate 10s linear infinite;
    }
    
    @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
    
    .feature-card:hover {
        transform: translateY(-8px);
        box-shadow: var(--shadow-xl);
        border-color: var(--primary-blue-light);
    }
    
    .feature-card:hover::before {
        opacity: 1;
    }
    
    .feature-card .feature-icon {
        font-size: 3rem;
        margin-bottom: 1.5rem;
        display: block;
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        position: relative;
        z-index: 1;
    }
    
    .feature-card h4 {
        color: var(--text-primary);
        font-weight: 700;
        margin-bottom: 1rem;
        font-size: 1.3rem;
        position: relative;
        z-index: 1;
    }
    
    .feature-card p {
        color: var(--text-secondary);
        line-height: 1.7;
        margin: 0;
        font-size: 1rem;
        font-weight: 500;
        position: relative;
        z-index: 1;
    }
    
    /* Status Indicators - Modern Design */
    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.25rem;
        border-radius: var(--radius-2xl);
        font-size: 0.9rem;
        font-weight: 600;
        margin: 0.25rem;
        gap: 0.75rem;
        text-transform: uppercase;
        letter-spacing: 0.025em;
        box-shadow: var(--shadow-sm);
        transition: all 0.2s ease;
    }
    
    .status-ready {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(6, 182, 212, 0.1) 100%);
        color: var(--success);
        border: 2px solid rgba(16, 185, 129, 0.2);
    }
    
    .status-processing {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1) 0%, rgba(251, 191, 36, 0.1) 100%);
        color: var(--warning);
        border: 2px solid rgba(245, 158, 11, 0.2);
    }
    
    .status-completed {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(99, 102, 241, 0.1) 100%);
        color: var(--primary-blue);
        border: 2px solid rgba(59, 130, 246, 0.2);
    }
    
    .status-error {
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.1) 100%);
        color: var(--error);
        border: 2px solid rgba(239, 68, 68, 0.2);
    }
    
    /* File Grid - Professional Layout */
    .file-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 1.5rem;
        margin: 2rem 0;
    }
    
    .file-card {
        background: var(--bg-primary);
        padding: 2rem;
        border-radius: var(--radius-lg);
        border: 1px solid var(--gray-200);
        text-align: center;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: var(--shadow-md);
        position: relative;
        overflow: hidden;
    }
    
    .file-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, var(--info) 0%, var(--primary-blue) 100%);
        transform: scaleX(0);
        transition: transform 0.3s ease;
        transform-origin: left;
    }
    
    .file-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-xl);
        border-color: var(--primary-blue-light);
    }
    
    .file-card:hover::before {
        transform: scaleX(1);
    }
    
    .file-card .file-icon {
        font-size: 2.5rem;
        margin-bottom: 1rem;
        display: block;
        background: linear-gradient(135deg, var(--info) 0%, var(--primary-blue) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .file-card .file-name {
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.75rem;
        word-break: break-word;
        font-size: 0.95rem;
        line-height: 1.4;
    }
    
    .file-card .file-size {
        color: var(--text-tertiary);
        font-size: 0.85rem;
        font-weight: 500;
        font-family: 'JetBrains Mono', monospace;
    }
    
    /* Welcome Container - Premium Design */
    .welcome-container {
        text-align: center;
        padding: 4rem 3rem;
        max-width: 1000px;
        margin: 0 auto;
        background: var(--bg-primary);
        border-radius: var(--radius-2xl);
        box-shadow: var(--shadow-xl);
        border: 1px solid var(--gray-200);
        position: relative;
        overflow: hidden;
    }
    
    .welcome-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 6px;
        background: linear-gradient(90deg, var(--primary-blue) 0%, var(--secondary-indigo) 50%, var(--secondary-purple) 100%);
    }
    
    .welcome-container h2 {
        color: var(--text-primary);
        font-weight: 800;
        margin-bottom: 2rem;
        font-size: 2.5rem;
        background: linear-gradient(135deg, var(--text-primary) 0%, var(--primary-blue) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .welcome-container p {
        color: var(--text-secondary);
        font-size: 1.2rem;
        line-height: 1.7;
        font-weight: 500;
    }
    
    /* Feature Grid */
    .feature-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin: 3rem 0;
    }
    
    /* Sidebar Styling - Professional Dark Theme */
    section[data-testid="stSidebar"] {
        background: linear-gradient(180deg, var(--bg-dark) 0%, var(--bg-dark-secondary) 100%) !important;
        border-right: 3px solid var(--primary-blue) !important;
    }
    
    .sidebar-header {
        text-align: center;
        padding: 1.5rem 0;
        border-bottom: 2px solid var(--bg-dark-tertiary);
        margin-bottom: 2rem;
        position: relative;
    }
    
    .sidebar-header::before {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 60px;
        height: 3px;
        background: linear-gradient(90deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        border-radius: var(--radius-sm);
    }
    
    .sidebar-header h2 {
        color: var(--text-white) !important;
        font-size: 1.6rem !important;
        margin: 0 !important;
        font-weight: 800 !important;
    }
    
    .sidebar-header p {
        color: #cbd5e1 !important;
        font-size: 0.95rem !important;
        margin: 0.75rem 0 0 0 !important;
        font-weight: 500 !important;
    }
    
    .sidebar-section {
        margin-bottom: 2.5rem;
    }
    
    .sidebar-section h4 {
        color: var(--text-white) !important;
        font-weight: 700 !important;
        margin-bottom: 1.25rem !important;
        font-size: 1rem !important;
        text-transform: uppercase !important;
        letter-spacing: 0.1em !important;
        position: relative !important;
        padding-left: 1rem !important;
    }
    
    .sidebar-section h4::before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 4px;
        height: 100%;
        background: linear-gradient(180deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%);
        border-radius: var(--radius-sm);
    }
    
    /* Sidebar Text Overrides */
    section[data-testid="stSidebar"] .element-container {
        color: #cbd5e1 !important;
    }
    
    section[data-testid="stSidebar"] .stMarkdown p {
        color: #cbd5e1 !important;
        font-weight: 500 !important;
    }
    
    section[data-testid="stSidebar"] .stMarkdown strong {
        color: var(--text-white) !important;
        font-weight: 700 !important;
    }
    
    /* Sidebar Metrics Enhancement */
    section[data-testid="stSidebar"] [data-testid="metric-container"] {
        background: rgba(59, 130, 246, 0.1) !important;
        border: 2px solid rgba(59, 130, 246, 0.2) !important;
        border-radius: var(--radius-md) !important;
        padding: 1rem !important;
        margin: 0.5rem 0 !important;
    }
    
    section[data-testid="stSidebar"] [data-testid="metric-container"] label {
        color: #94a3b8 !important;
        font-weight: 600 !important;
        text-transform: uppercase !important;
        font-size: 0.8rem !important;
        letter-spacing: 0.1em !important;
    }
    
    section[data-testid="stSidebar"] [data-testid="metric-container"] .metric-value {
        color: var(--info-light) !important;
        font-weight: 800 !important;
        font-family: 'JetBrains Mono', monospace !important;
    }
    
    /* Sidebar Button Styling */
    section[data-testid="stSidebar"] .stButton button {
        background: linear-gradient(135deg, var(--primary-blue) 0%, var(--secondary-indigo) 100%) !important;
        color: var(--text-white) !important;
        border: 2px solid transparent !important;
        border-radius: var(--radius-md) !important;
        font-weight: 600 !important;
        letter-spacing: 0.025em !important;
        transition: all 0.3s ease !important;
        white-space: nowrap !important;
        overflow: hidden !important;
        text-overflow: ellipsis !important;
    }
    
    section[data-testid="stSidebar"] .stButton button:hover {
        background: linear-gradient(135deg, var(--primary-blue-dark) 0%, var(--secondary-purple) 100%) !important;
        border-color: var(--primary-blue-light) !important;
        transform: translateY(-1px) !important;
        box-shadow: var(--shadow-lg) !important;
    }
    
    /* Sidebar Input Styling */
    section[data-testid="stSidebar"] .stNumberInput input,
    section[data-testid="stSidebar"] .stTextInput input {
        background: var(--bg-dark-tertiary) !important;
        color: var(--text-white) !important;
        border: 2px solid rgba(255, 255, 255, 0.1) !important;
        border-radius: var(--radius-md) !important;
        font-weight: 500 !important;
    }
    
    section[data-testid="stSidebar"] .stNumberInput input:focus,
    section[data-testid="stSidebar"] .stTextInput input:focus {
        border-color: var(--primary-blue-light) !important;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
    }
    
    /* Sidebar Success/Info Messages */
    section[data-testid="stSidebar"] .stSuccess {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.15) 0%, rgba(6, 182, 212, 0.15) 100%) !important;
        color: var(--success-light) !important;
        border: 2px solid rgba(16, 185, 129, 0.3) !important;
        border-radius: var(--radius-md) !important;
        font-weight: 600 !important;
    }
    
    section[data-testid="stSidebar"] .stInfo {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.15) 0%, rgba(99, 102, 241, 0.15) 100%) !important;
        color: var(--info-light) !important;
        border: 2px solid rgba(59, 130, 246, 0.3) !important;
        border-radius: var(--radius-md) !important;
        font-weight: 600 !important;
    }
    
    /* Custom Alert Styling */
    .stAlert {
        border-radius: var(--radius-lg) !important;
        border: none !important;
        box-shadow: var(--shadow-lg) !important;
        font-weight: 600 !important;
        padding: 1.25rem !important;
    }
    
    .stAlert[data-baseweb="notification"] {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(6, 182, 212, 0.1) 100%) !important;
        color: var(--success) !important;
        border-left: 4px solid var(--success) !important;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
        .app-header {
            padding: 2rem 1rem;
        }
        
        .app-header h1 {
            font-size: 2.5rem;
        }
        
        .chat-message {
            max-width: 95%;
        }
        
        .file-grid {
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        }
        
        .feature-grid {
            grid-template-columns: 1fr;
        }
        
        .welcome-container {
            padding: 2.5rem 1.5rem;
        }
        
        .content-area {
            padding: 1rem;
        }
        
        .card {
            padding: 1.5rem;
        }
    }
    
    @media (max-width: 480px) {
        .app-header h1 {
            font-size: 2rem;
        }
        
        .app-header p {
            font-size: 1rem;
        }
        
        .card-header h3 {
            font-size: 1.2rem;
        }
        
        .metric-value {
            font-size: 2rem;
        }
        
        .upload-area {
            padding: 2rem 1rem;
        }
    }
    
    /* Loading Animations */
    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }
    
    @keyframes shimmer {
        0% { background-position: -468px 0; }
        100% { background-position: 468px 0; }
    }
    
    .loading {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    
    .shimmer {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 400% 100%;
        animation: shimmer 1.5s ease-in-out infinite;
    }
    
    /* Focus Styles for Accessibility */
    button:focus,
    input:focus,
    select:focus,
    textarea:focus {
        outline: 3px solid rgba(59, 130, 246, 0.5) !important;
        outline-offset: 2px !important;
    }
    
    /* High Contrast Mode Support */
    @media (prefers-contrast: high) {
        :root {
            --primary-blue: #0000ff;
            --text-primary: #000000;
            --bg-primary: #ffffff;
        }
    }
    
    /* Reduced Motion Support */
    @media (prefers-reduced-motion: reduce) {
        * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
    }
    
    /* Print Styles */
    @media print {
        .sidebar, .app-header {
            display: none !important;
        }
        
        .card {
            box-shadow: none !important;
            border: 1px solid #000 !important;
        }
    }
</style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n n√¢ng cao v·ªõi t√≠ch h·ª£p c∆° s·ªü d·ªØ li·ªáu v√† session_title"""
    if 'current_session_id' not in st.session_state:
        st.session_state.current_session_id = None
    if 'session_state' not in st.session_state:
        st.session_state.session_state = None
    if 'auto_refresh' not in st.session_state:
        st.session_state.auto_refresh = False
    if 'job_description' not in st.session_state:
        st.session_state.job_description = ""
    if 'position_title' not in st.session_state:
        st.session_state.position_title = ""
    if 'required_candidates' not in st.session_state:
        st.session_state.required_candidates = 3
    if 'session_title_suggestions' not in st.session_state:
        st.session_state.session_title_suggestions = []
    
    # T·∫£i l·ªãch s·ª≠ chat t·ª´ c∆° s·ªü d·ªØ li·ªáu n·∫øu phi√™n t·ªìn t·∫°i
    if st.session_state.current_session_id:
        load_chat_history_from_db()

def load_chat_history_from_db():
    """T·∫£i l·ªãch s·ª≠ chat t·ª´ c∆° s·ªü d·ªØ li·ªáu"""
    try:
        if st.session_state.current_session_id:
            chat_history = db_manager.get_chat_history(st.session_state.current_session_id)
            # L∆∞u tr·ªØ trong session state ƒë·ªÉ t∆∞∆°ng th√≠ch
            st.session_state.chat_history = chat_history
    except Exception as e:
        logger.error(f"L·ªói t·∫£i l·ªãch s·ª≠ chat: {e}")
        st.session_state.chat_history = []

def render_sidebar():
    """Thanh b√™n n√¢ng cao v·ªõi hi·ªÉn th·ªã session_title"""
    with st.sidebar:
        # Header
        st.markdown("""
        <div class="sidebar-header">
            <h2 style="margin: 0; color: white; font-weight: 700;">üéØ ƒê√°nh gi√° CV</h2>
            <p style="margin: 0.5rem 0 0 0; color: #cbd5e1; font-size: 0.9rem;">H·ªá th·ªëng AI Tuy·ªÉn d·ª•ng</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Qu·∫£n l√Ω phi√™n
        st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        st.markdown('<h4>üóÇÔ∏è Qu·∫£n l√Ω phi√™n</h4>', unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ûï T·∫°o m·ªõi", help="T·∫°o phi√™n m·ªõi", use_container_width=True):
                st.session_state.current_session_id = generate_session_id()
                st.session_state.session_state = None
                st.session_state.job_description = ""
                st.session_state.position_title = ""
                st.rerun()
        
        with col2:
            if st.button("üîÑ L√†m m·ªõi", help="L√†m m·ªõi phi√™n", use_container_width=True):
                if st.session_state.current_session_id:
                    session_state = cv_workflow.get_session_state(st.session_state.current_session_id)
                    if session_state:
                        st.session_state.session_state = session_state
                        st.session_state.job_description = session_state.get('job_description', '')
                        st.session_state.position_title = session_state.get('position_title', '')
                st.rerun()
        
        # Th√¥ng tin phi√™n hi·ªán t·∫°i v·ªõi session_title
        if st.session_state.current_session_id:
            # L·∫•y th√¥ng tin hi·ªÉn th·ªã session
            display_info = cv_workflow.get_session_display_info(st.session_state.current_session_id)
            session_title = display_info.get('display_name', f'Phi√™n {st.session_state.current_session_id[:8]}...')
            
            # Hi·ªÉn th·ªã t√™n phi√™n thay v√¨ session_id
            st.success(f"**Phi√™n ƒëang ho·∫°t ƒë·ªông:**\n{session_title}")
            
            # T√≠nh nƒÉng ƒë·ªïi t√™n phi√™n
            with st.expander("‚úèÔ∏è ƒê·ªïi t√™n phi√™n"):
                current_title = st.session_state.session_state.get('session_title', '') if st.session_state.session_state else ''
                
                new_title = st.text_input(
                    "T√™n phi√™n m·ªõi:",
                    value=current_title,
                    placeholder="VD: Tuy·ªÉn Frontend Developer - React",
                    key="new_session_title"
                )
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üíæ L∆∞u", use_container_width=True):
                        if new_title.strip() and new_title != current_title:
                            if cv_workflow.update_session_title(st.session_state.current_session_id, new_title.strip()):
                                st.success("‚úÖ ƒê√£ ƒë·ªïi t√™n!")
                                # C·∫≠p nh·∫≠t session state
                                if st.session_state.session_state:
                                    st.session_state.session_state['session_title'] = new_title.strip()
                                st.rerun()
                            else:
                                st.error("‚ùå L·ªói ƒë·ªïi t√™n!")
                
                with col2:
                    if st.button("üéØ G·ª£i √Ω", use_container_width=True):
                        if st.session_state.job_description:
                            suggestions = cv_workflow.generate_session_title_suggestions(
                                st.session_state.job_description, 
                                st.session_state.position_title
                            )
                            st.write("**G·ª£i √Ω:**")
                            for i, suggestion in enumerate(suggestions, 1):
                                if st.button(f"{i}. {suggestion}", key=f"suggest_{i}", use_container_width=True):
                                    st.session_state.new_session_title = suggestion
                                    st.rerun()
            
            # C√†i ƒë·∫∑t phi√™n
            with st.expander("‚öôÔ∏è C√†i ƒë·∫∑t"):
                st.session_state.required_candidates = st.number_input(
                    "S·ªë ·ª©ng vi√™n c·∫ßn tuy·ªÉn", 
                    min_value=1, max_value=20, 
                    value=st.session_state.required_candidates,
                    key="sidebar_required_candidates"
                )
                
                st.session_state.auto_refresh = st.checkbox(
                    "T·ª± ƒë·ªông l√†m m·ªõi", 
                    value=st.session_state.auto_refresh,
                    help="T·ª± ƒë·ªông l√†m m·ªõi k·∫øt qu·∫£"
                )
        else:
            st.info("Ch∆∞a c√≥ phi√™n ho·∫°t ƒë·ªông")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Phi√™n g·∫ßn ƒë√¢y v·ªõi session_title
        st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        st.markdown('<h4>üìã Phi√™n g·∫ßn ƒë√¢y</h4>', unsafe_allow_html=True)
        
        # Th√™m t√¨m ki·∫øm phi√™n
        search_term = st.text_input(
            "üîç T√¨m ki·∫øm phi√™n:",
            placeholder="Nh·∫≠p t√™n phi√™n ho·∫∑c v·ªã tr√≠...",
            key="session_search"
        )
        
        if search_term:
            sessions = cv_workflow.search_sessions(search_term)
        else:
            sessions = db_manager.get_all_sessions()
        
        if sessions:
            for session in sessions[:5]:  # Hi·ªÉn th·ªã 5 phi√™n g·∫ßn nh·∫•t
                # S·ª≠ d·ª•ng session_title thay v√¨ created_at
                session_display_name = session.get('session_title', f"Phi√™n {session['session_id'][:8]}...")
                
                with st.expander(f"üìÖ {session_display_name}"):
                    st.write(f"**V·ªã tr√≠:** {session.get('position_title', 'N/A')}")
                    st.write(f"**CV:** {session['total_cvs']}")
                    st.write(f"**ƒê√°nh gi√°:** {session['total_evaluations']}")
                    st.write(f"**T·∫°o l√∫c:** {format_datetime(session['created_at'])}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"üìÇ T·∫£i", key=f"load_{session['session_id']}", use_container_width=True):
                            st.session_state.current_session_id = session['session_id']
                            session_state = cv_workflow.get_session_state(session['session_id'])
                            if session_state:
                                st.session_state.session_state = session_state
                                st.session_state.job_description = session_state.get('job_description', '')
                                st.session_state.position_title = session_state.get('position_title', '')
                            st.rerun()
                    
                    with col2:
                        if st.button(f"üóëÔ∏è X√≥a", key=f"del_{session['session_id']}", use_container_width=True):
                            if db_manager.delete_session(session['session_id']):
                                st.success("ƒê√£ x√≥a phi√™n!")
                                st.rerun()
        else:
            if search_term:
                st.info(f"Kh√¥ng t√¨m th·∫•y phi√™n n√†o v·ªõi '{search_term}'")
            else:
                st.info("Ch∆∞a c√≥ phi√™n g·∫ßn ƒë√¢y")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Th·ªëng k√™ phi√™n hi·ªán t·∫°i (gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc)
        st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        st.markdown('<h4>üìä Th·ªëng k√™ phi√™n hi·ªán t·∫°i</h4>', unsafe_allow_html=True)
        
        if st.session_state.current_session_id and st.session_state.session_state:
            session_state = st.session_state.session_state
            
            # L·∫•y ph√¢n t√≠ch t·ª´ c∆° s·ªü d·ªØ li·ªáu
            analytics = db_manager.get_session_analytics(st.session_state.current_session_id)
            
            if analytics:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("üìÅ T·ªáp tin", analytics.get('total_files_uploaded', 0))
                    st.metric("üìä ƒê√°nh gi√°", analytics.get('total_evaluations', 0))
                    
                with col2:
                    st.metric("üìà ƒêi·ªÉm TB", f"{analytics.get('average_score', 0):.1f}")
                    st.metric("üí¨ Tin nh·∫Øn", analytics.get('total_chat_messages', 0))
                
                # Hi·ªÉn th·ªã t·ª∑ l·ªá ƒë·∫°t y√™u c·∫ßu n·∫øu c√≥
                if session_state.get('final_results'):
                    results = session_state['final_results']
                    qualified_count = results.get('qualified_count', 0)
                    total_cvs = results.get('total_cvs', 0)
                    
                    if total_cvs > 0:
                        pass_rate = (qualified_count / total_cvs) * 100
                        st.metric("‚úÖ T·ª∑ l·ªá ƒë·∫°t", f"{pass_rate:.1f}%")
                        
                    # Hi·ªÉn th·ªã th√¥ng tin phi√™n chi ti·∫øt
                    st.markdown("---")
                    st.markdown("**üìã Chi ti·∫øt phi√™n:**")
                    st.write(f"‚Ä¢ V·ªã tr√≠: {session_state.get('position_title', 'N/A')}")
                    st.write(f"‚Ä¢ C·∫ßn tuy·ªÉn: {session_state.get('required_candidates', 0)} ng∆∞·ªùi")
                    st.write(f"‚Ä¢ Tr·∫°ng th√°i: {session_state.get('processing_status', 'N/A')}")
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ nhanh
                    if results:
                        best_score = results.get('summary', {}).get('best_score', 0)
                        worst_score = results.get('summary', {}).get('worst_score', 0)
                        st.write(f"‚Ä¢ ƒêi·ªÉm cao nh·∫•t: {best_score:.1f}")
                        st.write(f"‚Ä¢ ƒêi·ªÉm th·∫•p nh·∫•t: {worst_score:.1f}")
            else:
                st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ph√¢n t√≠ch cho phi√™n n√†y")
        else:
            st.info("Ch∆∞a c√≥ phi√™n ho·∫°t ƒë·ªông")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Th·ªëng k√™ h·ªá th·ªëng t·ªïng (di chuy·ªÉn xu·ªëng cu·ªëi v√† thu g·ªçn)
        st.markdown('<div class="sidebar-section">', unsafe_allow_html=True)
        
        with st.expander("üóÑÔ∏è Th·ªëng k√™ h·ªá th·ªëng"):
            db_stats = db_manager.get_database_stats()
            if db_stats:
                st.write(f"**T·ªïng phi√™n:** {db_stats.get('total_sessions', 0)}")
                st.write(f"**T·ªïng CV:** {db_stats.get('total_cvs', 0)}")
                st.write(f"**ƒêi·ªÉm TB to√†n h·ªá th·ªëng:** {db_stats.get('average_score', 0):.1f}")
                
                # Th√™m n√∫t migrate old sessions
                if st.button("üîÑ T·∫°o title cho phi√™n c≈©", use_container_width=True):
                    updated = cv_workflow.migrate_old_sessions_to_titles()
                    if updated > 0:
                        st.success(f"‚úÖ ƒê√£ t·∫°o title cho {updated} phi√™n!")
                    else:
                        st.info("T·∫•t c·∫£ phi√™n ƒë√£ c√≥ title")
            else:
                st.write("Kh√¥ng c√≥ d·ªØ li·ªáu")
        
        st.markdown('</div>', unsafe_allow_html=True)

def render_header():
    """Hi·ªÉn th·ªã header ·ª©ng d·ª•ng v·ªõi session title"""
    # Get current session display name
    session_display = ""
    if st.session_state.current_session_id and st.session_state.session_state:
        session_title = st.session_state.session_state.get('session_title', '')
        if session_title:
            session_display = f" ‚Ä¢ {session_title}"
    
    st.markdown(f"""
    <div class="app-header">
        <h1>üéØ H·ªá th·ªëng ƒê√°nh gi√° CV b·∫±ng AI{session_display}</h1>
        <p>Tr·ª£ l√Ω AI tuy·ªÉn d·ª•ng t∆∞∆°ng t√°c ‚Ä¢ Tr√≤ chuy·ªán v·ªõi k·∫øt qu·∫£ ƒë√°nh gi√° ‚Ä¢ Th√¥ng tin chi ti·∫øt theo th·ªùi gian th·ª±c</p>
    </div>
    """, unsafe_allow_html=True)

def render_chat_interface():
    """Hi·ªÉn th·ªã giao di·ªán chat ch√≠nh"""
    st.markdown('<div class="content-area">', unsafe_allow_html=True)
    
    if not st.session_state.current_session_id:
        render_welcome_screen()
        st.markdown('</div>', unsafe_allow_html=True)
        return
    
    # B·ªë c·ª•c ch√≠nh
    col1, col2 = st.columns([2, 1])
    
    with col1:
        render_chat_messages()
        render_file_upload_area()
    
    with col2:
        render_session_info()
        render_quick_actions()
    
    st.markdown('</div>', unsafe_allow_html=True)

def render_welcome_screen():
    """M√†n h√¨nh ch√†o m·ª´ng chuy√™n nghi·ªáp"""
    st.markdown("""
    <div class="welcome-container">
        <h2>Ch√†o m·ª´ng ƒë·∫øn v·ªõi H·ªá th·ªëng ƒê√°nh gi√° CV b·∫±ng AI</h2>
        <p style="font-size: 1.1rem; margin-bottom: 3rem; line-height: 1.6;">
            Bi·∫øn ƒë·ªïi quy tr√¨nh tuy·ªÉn d·ª•ng c·ªßa b·∫°n v·ªõi ƒë√°nh gi√° CV ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI, 
            ch·∫•m ƒëi·ªÉm t·ª± ƒë·ªông v√† kh·ªõp ·ª©ng vi√™n th√¥ng minh.
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Th·∫ª t√≠nh nƒÉng
    st.markdown('<div class="feature-grid">', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-card">
            <span class="feature-icon">ü§ñ</span>
            <h4>Ph√¢n t√≠ch AI Ti√™n ti·∫øn</h4>
            <p>OCR ti√™n ti·∫øn v·ªõi Gemini v√† ƒë√°nh gi√° th·ªùi gian th·ª±c s·ª≠ d·ª•ng GPT-3.5-turbo v·ªõi ph·∫£n h·ªìi tr·ª±c ti·∫øp.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-card">
            <span class="feature-icon">üí¨</span>
            <h4>Chat AI T∆∞∆°ng t√°c</h4>
            <p>ƒê·∫∑t c√¢u h·ªèi v·ªÅ ·ª©ng vi√™n c·ª• th·ªÉ, nh·∫≠n th√¥ng tin chi ti·∫øt v√† t∆∞∆°ng t√°c v·ªõi d·ªØ li·ªáu ƒë√°nh gi√° m·ªôt c√°ch t·ª± nhi√™n.</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="feature-card">
            <span class="feature-icon">üìä</span>
            <h4>Th√¥ng tin Th·ªùi gian Th·ª±c</h4>
            <p>Nh·∫≠n ph·∫£n h·ªìi t·ª©c th√¨ trong qu√° tr√¨nh ƒë√°nh gi√°, ph·∫£n h·ªìi tr·ª±c ti·∫øp v√† ph√¢n t√≠ch ·ª©ng vi√™n to√†n di·ªán theo y√™u c·∫ßu.</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # B·∫Øt ƒë·∫ßu
    st.markdown("""
    <div class="card" style="margin-top: 2rem; text-align: center;">
        <h3 style="color: #2c3e50; margin-bottom: 1rem;">üöÄ B·∫Øt ƒë·∫ßu</h3>
        <p style="color: #6c757d; margin-bottom: 1.5rem;">S·∫µn s√†ng c√°ch m·∫°ng h√≥a tuy·ªÉn d·ª•ng? L√†m theo c√°c b∆∞·ªõc ƒë∆°n gi·∫£n n√†y:</p>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-top: 1rem;">
            <div style="text-align: center; padding: 1rem;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">1Ô∏è‚É£</div>
                <strong>T·∫°o phi√™n</strong><br>
                <small style="color: #6c757d;">Nh·∫•p "‚ûï T·∫°o m·ªõi" ·ªü thanh b√™n</small>
            </div>
            <div style="text-align: center; padding: 1rem;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">2Ô∏è‚É£</div>
                <strong>ƒê·∫∑t y√™u c·∫ßu</strong><br>
                <small style="color: #6c757d;">ƒê·ªãnh nghƒ©a m√¥ t·∫£ c√¥ng vi·ªác & ti√™u ch√≠</small>
            </div>
            <div style="text-align: center; padding: 1rem;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">3Ô∏è‚É£</div>
                <strong>T·∫£i CV l√™n</strong><br>
                <small style="color: #6c757d;">K√©o th·∫£ t·ªáp ·ª©ng vi√™n</small>
            </div>
            <div style="text-align: center; padding: 1rem;">
                <div style="font-size: 2rem; margin-bottom: 0.5rem;">4Ô∏è‚É£</div>
                <strong>Chat & Kh√°m ph√°</strong><br>
                <small style="color: #6c757d;">ƒê·∫∑t c√¢u h·ªèi v·ªÅ ·ª©ng vi√™n</small>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

def render_chat_messages():
    """Hi·ªÉn th·ªã chat ƒë√£ s·ª≠a l·ªói HTML - kh√¥ng c√≥ v·∫•n ƒë·ªÅ kho·∫£ng tr·∫Øng"""
    st.markdown("""
        <h2 style='color: white;'>üí¨ Cu·ªôc tr√≤ chuy·ªán v·ªõi Tr·ª£ l√Ω AI</h2>
    """, unsafe_allow_html=True)
    
    # T·∫£i l·ªãch s·ª≠ chat m·ªõi t·ª´ c∆° s·ªü d·ªØ li·ªáu
    if st.session_state.current_session_id:
        chat_history = db_manager.get_chat_history(st.session_state.current_session_id)
    else:
        chat_history = []
    
    if chat_history:
        # CSS trong m·ªôt kh·ªëi
        st.markdown("""<style>
        .simple-chat {
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 1rem;
            max-height: 500px;
            overflow-y: auto;
            margin: 1rem 0;
        }
        .chat-msg {
            margin: 0.8rem 0;
            padding: 0.8rem;
            border-radius: 6px;
            color: #000000 !important;
            font-size: 14px;
            line-height: 1.4;
        }
        .msg-system { background: #f0f8ff; border-left: 3px solid #0066cc; }
        .msg-user { background: #f5f5f5; border-left: 3px solid #666; }
        .msg-result { background: #f0fff0; border-left: 3px solid #00aa00; }
        .msg-error { background: #fff0f0; border-left: 3px solid #cc0000; }
        .msg-summary { background: #fffaf0; border-left: 3px solid #ff8800; }
        .msg-time { font-size: 11px; color: #666; margin-bottom: 4px; }
        .msg-text { color: #000000 !important; font-weight: normal; }
        </style>""", unsafe_allow_html=True)
        
        # X√¢y d·ª±ng chu·ªói HTML KH√îNG c√≥ kho·∫£ng tr·∫Øng gi·ªØa c√°c th·∫ª
        messages_html = []
        messages_html.append('<div class="simple-chat">')
        
        for message in chat_history:
            msg_type = message.get('type', 'system')
            msg_text = message.get('message', '')
            timestamp = datetime.fromtimestamp(message.get('timestamp', time.time())).strftime("%H:%M:%S")
            
            # L√†m s·∫°ch vƒÉn b·∫£n tin nh·∫Øn
            clean_msg_text = str(msg_text).replace('<', '&lt;').replace('>', '&gt;')
            
            # L·∫•y l·ªõp CSS v√† bi·ªÉu t∆∞·ª£ng
            type_map = {
                'system': ('msg-system', 'ü§ñ'),
                'user': ('msg-user', 'üë§'),
                'result': ('msg-result', 'üìä'),
                'error': ('msg-error', '‚ùå'),
                'summary': ('msg-summary', 'üìà')
            }
            
            css_class, icon = type_map.get(msg_type, ('msg-system', 'üí≠'))
            
            # X√¢y d·ª±ng HTML tin nh·∫Øn - KH√îNG c√≥ kho·∫£ng tr·∫Øng gi·ªØa c√°c th·∫ª
            message_html = f'<div class="chat-msg {css_class}"><div class="msg-time">{icon} {timestamp}</div><div class="msg-text">{clean_msg_text}</div></div>'
            messages_html.append(message_html)
        
        messages_html.append('</div>')
        
        # K·∫øt h·ª£p kh√¥ng c√≥ b·∫•t k·ª≥ d·∫•u ph√¢n c√°ch n√†o ƒë·ªÉ tr√°nh kho·∫£ng tr·∫Øng
        final_html = ''.join(messages_html)
        
        # Hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng kh·ªëi ƒë∆°n
        st.markdown(final_html, unsafe_allow_html=True)
        
    else:
        # Tr·∫°ng th√°i tr·ªëng
        st.markdown("""<div style="text-align: center; padding: 2rem; background: #f9f9f9; border-radius: 8px; border: 1px dashed #ccc; color: #000000;"><h4 style="color: #000000;">üí≠ Ch∆∞a c√≥ tin nh·∫Øn n√†o</h4><p style="color: #666;">B·∫Øt ƒë·∫ßu b·∫±ng c√°ch t·∫£i CV l√™n ho·∫∑c ƒë·∫∑t c√¢u h·ªèi!</p></div>""", unsafe_allow_html=True)
    
    # ƒê·∫ßu v√†o chat
    if st.session_state.current_session_id:
        st.markdown("---")
        
        # Khu v·ª±c ƒë·∫ßu v√†o
        user_question = st.text_input(
            "üí¨ H·ªèi v·ªÅ ·ª©ng vi√™n ho·∫∑c CV:",
            placeholder="VD: H√£y cho t√¥i bi·∫øt v·ªÅ kinh nghi·ªám c·ªßa ·ª©ng vi√™n h√†ng ƒë·∫ßu",
            key="chat_input"
        )
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("G·ª≠i", type="primary", use_container_width=True):
                if user_question.strip():
                    handle_chat_query(user_question.strip())
                    st.rerun()
        
        with col2:
            if st.button("üßπ X√≥a", use_container_width=True):
                if st.session_state.current_session_id:
                    db_manager.clear_chat_history(st.session_state.current_session_id)
                    st.success("ƒê√£ x√≥a chat!")
                    st.rerun()
        
        # N√∫t nhanh
        if st.session_state.session_state and st.session_state.session_state.get('final_results'):
            with col3:
                if st.button("üë• Top ·ª©ng vi√™n", use_container_width=True):
                    handle_chat_query("Ai l√† 3 ·ª©ng vi√™n h√†ng ƒë·∫ßu v√† t·∫°i sao?")
                    st.rerun()
            
            with col4:
                if st.button("üìä T√≥m t·∫Øt", use_container_width=True):
                    handle_chat_query("Cho t√¥i m·ªôt b·∫£n t√≥m t·∫Øt t·∫•t c·∫£ k·∫øt qu·∫£ ƒë√°nh gi√°")
                    st.rerun()

def render_file_upload_area():
    """Giao di·ªán t·∫£i t·ªáp n√¢ng cao"""
    st.markdown("""
    <div class="card">
        <div class="card-header">
            <div class="card-icon">üìÅ</div>
            <h3>T·∫£i l√™n & X·ª≠ l√Ω CV</h3>
        </div>
    """, unsafe_allow_html=True)
    
    # Nh·∫≠p m√¥ t·∫£ c√¥ng vi·ªác (n·∫øu ch∆∞a ƒë·∫∑t)
    if not st.session_state.job_description:
        st.markdown("""
            <h3 style='color: white;'>üìã Y√™u c·∫ßu c√¥ng vi·ªác</h3>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            job_description = st.text_area(
                "M√¥ t·∫£ c√¥ng vi·ªác",
                height=120,
                placeholder="Nh·∫≠p y√™u c·∫ßu c√¥ng vi·ªác chi ti·∫øt, k·ªπ nƒÉng, kinh nghi·ªám c·∫ßn thi·∫øt...",
                key="job_desc_input"
            )
            
        with col2:
            position_title = st.text_input(
                "T√™n v·ªã tr√≠",
                placeholder="VD: L·∫≠p tr√¨nh vi√™n Python",
                key="position_input"
            )
            
            required_candidates = st.number_input(
                "S·ªë ·ª©ng vi√™n c·∫ßn tuy·ªÉn",
                min_value=1, max_value=20,
                value=3,
                key="candidates_input"
            )
        
        if st.button("üíæ L∆∞u th√¥ng tin c√¥ng vi·ªác", type="primary", use_container_width=True):
            if job_description.strip():
                st.session_state.job_description = job_description
                st.session_state.position_title = position_title or "V·ªã tr√≠"
                st.session_state.required_candidates = required_candidates
                st.success("‚úÖ ƒê√£ l∆∞u th√¥ng tin c√¥ng vi·ªác th√†nh c√¥ng!")
                st.rerun()
            else:
                st.error("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£ c√¥ng vi·ªác")
    
    # Khu v·ª±c t·∫£i t·ªáp
    st.markdown('''
    <div class="upload-area">
        <h4>üéØ K√©o th·∫£ t·ªáp CV v√†o ƒë√¢y</h4>
        <p>ƒê·ªãnh d·∫°ng h·ªó tr·ª£: PDF, JPG, PNG, GIF, BMP, TIFF ‚Ä¢ K√≠ch th∆∞·ªõc t·ªëi ƒëa: 200MB m·ªói t·ªáp</p>
    </div>
    ''', unsafe_allow_html=True)
    
    uploaded_files = st.file_uploader(
        "Ch·ªçn t·ªáp CV",
        accept_multiple_files=True,
        type=['pdf', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff'],
        key="file_uploader",
        label_visibility="collapsed"
    )
    
    if uploaded_files and st.session_state.job_description:
        # Hi·ªÉn th·ªã t·ªáp ƒë√£ t·∫£i l√™n
        st.markdown("""
            <h3 style='color: white;'>üìã T·ªáp ƒë√£ ch·ªçn</h3>
        """, unsafe_allow_html=True)
        
        valid_files = []
        total_size = 0
        
        # L∆∞·ªõi t·ªáp
        st.markdown('<div class="file-grid">', unsafe_allow_html=True)
        
        cols = st.columns(min(len(uploaded_files), 4))
        
        for i, file in enumerate(uploaded_files):
            col_idx = i % len(cols)
            
            with cols[col_idx]:
                if validate_file_type(file.type):
                    valid_files.append(file)
                    total_size += file.size
                    
                    st.markdown(f'''
                    <div class="file-card">
                        <span class="file-icon">{get_file_icon(file.type)}</span>
                        <div class="file-name">{file.name}</div>
                        <div class="file-size">{format_file_size(file.size)}</div>
                    </div>
                    ''', unsafe_allow_html=True)
                else:
                    st.error(f"‚ùå {file.name} - Lo·∫°i t·ªáp kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        if valid_files:
            # T√≥m t·∫Øt
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("T·ªáp h·ª£p l·ªá", len(valid_files))
            with col2:
                st.metric("T·ªïng k√≠ch th∆∞·ªõc", format_file_size(total_size))
            with col3:
                estimated_time = len(valid_files) * 15
                st.metric("Th·ªùi gian ∆∞·ªõc t√≠nh", f"{estimated_time}s")
            
            # N√∫t x·ª≠ l√Ω
            if st.button("üöÄ B·∫Øt ƒë·∫ßu ƒë√°nh gi√° AI", type="primary", use_container_width=True):
                start_chat_evaluation_with_streaming(valid_files)
    
    st.markdown('</div>', unsafe_allow_html=True)

def render_session_info():
    """Th√¥ng tin phi√™n n√¢ng cao v·ªõi session_title"""
    st.markdown("""
    <div class="card">
        <div class="card-header">
            <div class="card-icon">üìä</div>
            <h3>Th√¥ng tin phi√™n</h3>
        </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.current_session_id and st.session_state.session_state:
        session = st.session_state.session_state
        
        # Hi·ªÉn th·ªã session title prominently
        session_title = session.get('session_title', 'Phi√™n kh√¥ng c√≥ t√™n')
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: white; padding: 1.5rem; border-radius: 12px; margin-bottom: 1.5rem; text-align: center;">
            <h3 style="margin: 0; color: white;">üìù {session_title}</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # L·∫•y ph√¢n t√≠ch chi ti·∫øt t·ª´ c∆° s·ªü d·ªØ li·ªáu
        analytics = db_manager.get_session_analytics(st.session_state.current_session_id)
        session_info = db_manager.get_session(st.session_state.current_session_id)
        
        # Chi ti·∫øt phi√™n
        if session_info:
            st.markdown(f"**üéØ V·ªã tr√≠:** {session_info.get('position_title', 'N/A')}")
            st.markdown(f"**üìÖ T·∫°o l√∫c:** {format_datetime(session_info.get('created_at', ''))}")
            st.markdown(f"**üë• C·∫ßn tuy·ªÉn:** {session_info.get('required_candidates', 'N/A')} ng∆∞·ªùi")
            st.markdown(f"**‚ö° Tr·∫°ng th√°i:** {session_info.get('status', 'ƒëang ho·∫°t ƒë·ªông').title()}")
        
        st.markdown("---")
        
        # Th·ªëng k√™ x·ª≠ l√Ω (gi·ªØ nguy√™n ph·∫ßn c√≤n l·∫°i)
        if analytics:
            st.markdown("### üìà Th·ªëng k√™ x·ª≠ l√Ω")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{analytics.get('total_files_uploaded', 0)}</div>
                    <div class="metric-label">T·ªáp ƒë√£ t·∫£i</div>
                </div>
                """, unsafe_allow_html=True)
                
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{analytics.get('total_files_processed', 0)}</div>
                    <div class="metric-label">T·ªáp ƒë√£ x·ª≠ l√Ω</div>
                </div>
                """, unsafe_allow_html=True)
                
            with col3:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{analytics.get('total_chat_messages', 0)}</div>
                    <div class="metric-label">Tin nh·∫Øn chat</div>
                </div>
                """, unsafe_allow_html=True)
        
        # K·∫øt qu·∫£ ƒë√°nh gi√°
        if 'final_results' in session and session['final_results']:
            results = session['final_results']
            
            st.markdown("### üìä K·∫øt qu·∫£ ƒë√°nh gi√°")
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{results.get('total_cvs', 0)}</div>
                    <div class="metric-label">T·ªïng CV</div>
                </div>
                """, unsafe_allow_html=True)
                
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{results.get('qualified_count', 0)}</div>
                    <div class="metric-label">ƒê·∫°t y√™u c·∫ßu</div>
                </div>
                """, unsafe_allow_html=True)
            
            avg_score = results.get('average_score', 0)
            qualification_rate = results.get('summary', {}).get('qualification_rate', 0)
            
            col1, col2 = st.columns(2)
            with col1:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{avg_score:.1f}</div>
                    <div class="metric-label">ƒêi·ªÉm TB</div>
                </div>
                """, unsafe_allow_html=True)
                
            with col2:
                st.markdown(f"""
                <div class="metric-card">
                    <div class="metric-value">{qualification_rate:.1f}%</div>
                    <div class="metric-label">T·ª∑ l·ªá ƒë·∫°t</div>
                </div>
                """, unsafe_allow_html=True)
    
    else:
        st.markdown("""
        <div style="text-align: center; padding: 2rem; color: #6c757d;">
            <div style="font-size: 2rem; margin-bottom: 0.5rem;">üîÑ</div>
            <p>Ch∆∞a c√≥ phi√™n ho·∫°t ƒë·ªông</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

def render_quick_actions():
    """B·∫£ng thao t√°c nhanh n√¢ng cao"""
    st.markdown("""
    <div class="card">
        <div class="card-header">
            <div class="card-icon">‚ö°</div>
            <h3>Thao t√°c nhanh</h3>
        </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.session_state and st.session_state.session_state.get('final_results'):
        results = st.session_state.session_state['final_results']
        
        # N√∫t thao t√°c ch√≠nh
        if st.button("üìä Xem k·∫øt qu·∫£ chi ti·∫øt", use_container_width=True):
            render_detailed_results(results)
        
        if st.button("üìã Y√™u c·∫ßu ph√¢n t√≠ch AI", use_container_width=True):
            render_ai_report()
        
        st.markdown("### üìß Thao t√°c email")
        
        qualified_count = results.get('qualified_count', 0)
        rejected_count = results.get('total_cvs', 0) - qualified_count
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button(f"‚ùå T·ª´ ch·ªëi\n({rejected_count})", use_container_width=True):
                send_rejection_emails_manual()
        
        with col2:
            if st.button(f"‚úÖ Ph·ªèng v·∫•n\n({qualified_count})", use_container_width=True):
                schedule_interview_emails_manual()
        
        st.markdown("### üì§ T√πy ch·ªçn xu·∫•t")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìÑ JSON", use_container_width=True):
                export_results_json()
        
        with col2:
            if st.button("üìä CSV", use_container_width=True):
                export_summary_csv()
    
    else:
        st.markdown("""
        <div style="text-align: center; padding: 1.5rem; color: #6c757d;">
            <div style="font-size: 1.5rem; margin-bottom: 0.5rem;">üéØ</div>
            <p style="margin: 0;">Ho√†n th√†nh ƒë√°nh gi√° ƒë·ªÉ m·ªü kh√≥a thao t√°c</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

def handle_chat_query(question: str):
    """X·ª≠ l√Ω truy v·∫•n chat ng∆∞·ªùi d√πng v·ªõi l∆∞u tr·ªØ c∆° s·ªü d·ªØ li·ªáu"""
    try:
        if not st.session_state.current_session_id:
            st.error("Kh√¥ng c√≥ phi√™n ho·∫°t ƒë·ªông. Vui l√≤ng t·∫°o phi√™n m·ªõi tr∆∞·ªõc.")
            return
        
        # L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu
        cv_workflow.add_chat_message_to_session(
            st.session_state.current_session_id,
            'user',
            question,
            'user'
        )
        
        # Ki·ªÉm tra n·∫øu ch√∫ng ta c√≥ d·ªØ li·ªáu ƒë√°nh gi√°
        if not st.session_state.session_state or not st.session_state.session_state.get('final_results'):
            cv_workflow.add_chat_message_to_session(
                st.session_state.current_session_id,
                'system',
                "ü§ñ T√¥i ch∆∞a c√≥ d·ªØ li·ªáu ƒë√°nh gi√° n√†o. Vui l√≤ng t·∫£i l√™n v√† ƒë√°nh gi√° m·ªôt s·ªë CV tr∆∞·ªõc!"
            )
            return
        
        # L·∫•y d·ªØ li·ªáu phi√™n hi·ªán t·∫°i
        session_data = st.session_state.session_state
        results = session_data.get('final_results', {})
        job_description = session_data.get('job_description', '')
        
        # T·∫°o ng·ªØ c·∫£nh cho AI
        context = create_chat_context(results, job_description, question)
        
        # T·∫°o ph·∫£n h·ªìi AI
        with st.spinner("ü§ñ AI ƒëang suy nghƒ©..."):
            response = generate_chat_response(context, question)
        
        # L∆∞u ph·∫£n h·ªìi AI v√†o c∆° s·ªü d·ªØ li·ªáu
        cv_workflow.add_chat_message_to_session(
            st.session_state.current_session_id,
            'result',
            f"ü§ñ {response}",
            'assistant'
        )
        
    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω truy v·∫•n chat: {e}")
        cv_workflow.add_chat_message_to_session(
            st.session_state.current_session_id,
            'error',
            f"‚ùå L·ªói x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n: {str(e)}",
            'system'
        )

def create_chat_context(results: Dict, job_description: str, question: str) -> str:
    """T·∫°o ng·ªØ c·∫£nh cho ph·∫£n h·ªìi chat AI"""
    try:
        all_evaluations = results.get('all_evaluations', [])
        
        # T·∫°o ng·ªØ c·∫£nh t√≥m t·∫Øt
        context = f"""
        M√î T·∫¢ C√îNG VI·ªÜC:
        {job_description}
        
        T√ìM T·∫ÆT K·∫æT QU·∫¢ ƒê√ÅNH GI√Å:
        - T·ªïng CV: {results.get('total_cvs', 0)}
        - ·ª®ng vi√™n ƒë·∫°t y√™u c·∫ßu: {results.get('qualified_count', 0)}
        - ƒêi·ªÉm trung b√¨nh: {results.get('average_score', 0):.1f}/10
        - T·ª∑ l·ªá ƒë·∫°t: {results.get('summary', {}).get('qualification_rate', 0):.1f}%
        
        CHI TI·∫æT ·ª®NG VI√äN:
        """
        
        # Th√™m th√¥ng tin ·ª©ng vi√™n
        for i, candidate in enumerate(all_evaluations[:10], 1):  # Gi·ªõi h·∫°n 10 ·ª©ng vi√™n h√†ng ƒë·∫ßu
            filename = candidate.get('filename', f'·ª®ng vi√™n {i}')
            score = candidate.get('score', 0)
            qualified = "‚úÖ ƒê·∫°t y√™u c·∫ßu" if candidate.get('is_qualified', False) else "‚ùå Kh√¥ng ƒë·∫°t y√™u c·∫ßu"
            
            context += f"\n{i}. {filename} - ƒêi·ªÉm: {score:.1f}/10 - {qualified}"
            
            # Th√™m chi ti·∫øt ƒë√°nh gi√° n·∫øu c√≥
            eval_text = candidate.get('evaluation_text', '')
            if eval_text:
                try:
                    eval_data = json.loads(eval_text)
                    if isinstance(eval_data, dict):
                        summary = eval_data.get('T·ªïng k·∫øt', '')
                        strengths = eval_data.get('ƒêi·ªÉm m·∫°nh', [])
                        if summary:
                            context += f"\n   T√≥m t·∫Øt: {summary}"
                        if strengths:
                            context += f"\n   ƒêi·ªÉm m·∫°nh: {', '.join(strengths[:3])}"
                except:
                    pass
            
            # Th√™m vƒÉn b·∫£n CV ƒë√£ tr√≠ch xu·∫•t cho c√°c truy v·∫•n chi ti·∫øt
            extracted_text = candidate.get('extracted_text', '')
            if extracted_text and len(question) > 50:  # Cho c√°c c√¢u h·ªèi chi ti·∫øt
                context += f"\n   N·ªôi dung CV: {extracted_text[:500]}..."
        
        return context
        
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ng·ªØ c·∫£nh chat: {e}")
        return f"M√¥ t·∫£ c√¥ng vi·ªác: {job_description}\nD·ªØ li·ªáu ƒë√°nh gi√° c√≥ s·∫µn nh∆∞ng l·ªói x·ª≠ l√Ω chi ti·∫øt."

def generate_chat_response(context: str, question: str) -> str:
    """T·∫°o ph·∫£n h·ªìi AI cho truy v·∫•n chat"""
    try:
        openai_api_key = os.getenv("OPENAI_API_KEY")
        if not openai_api_key:
            return "Kh√≥a API OpenAI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t m√¥i tr∆∞·ªùng."
        
        client = OpenAI(api_key=openai_api_key)
        
        prompt = f"""
        B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n gia t∆∞ v·∫•n tuy·ªÉn d·ª•ng. B·∫°n c√≥ quy·ªÅn truy c·∫≠p v√†o d·ªØ li·ªáu ƒë√°nh gi√° CV v√† n√™n cung c·∫•p th√¥ng tin h·ªØu √≠ch, chuy√™n nghi·ªáp v·ªÅ ·ª©ng vi√™n.
        
        NG·ªÆ C·∫¢NH:
        {context}
        
        C√ÇU H·ªéI NG∆Ø·ªúI D√ôNG: {question}
        
        Vui l√≤ng cung c·∫•p ph·∫£n h·ªìi h·ªØu √≠ch, chuy√™n nghi·ªáp d·ª±a tr√™n d·ªØ li·ªáu ƒë√°nh gi√°. N·∫øu c√¢u h·ªèi v·ªÅ ·ª©ng vi√™n c·ª• th·ªÉ, h√£y s·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø c·ªßa h·ªç. H√£y s√∫c t√≠ch nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin.
        
        H∆∞·ªõng d·∫´n:
        - H√£y chuy√™n nghi·ªáp v√† h·ªØu √≠ch
        - S·ª≠ d·ª•ng d·ªØ li·ªáu c·ª• th·ªÉ t·ª´ c√°c ƒë√°nh gi√° khi c√≥
        - N·∫øu ƒë∆∞·ª£c h·ªèi v·ªÅ ·ª©ng vi√™n theo t√™n, h√£y t√¨m ki·∫øm qua n·ªôi dung CV
        - Cung c·∫•p th√¥ng tin chi ti·∫øt c√≥ th·ªÉ th·ª±c hi·ªán cho c√°c quy·∫øt ƒë·ªãnh tuy·ªÉn d·ª•ng
        - Gi·ªØ ph·∫£n h·ªìi s√∫c t√≠ch nh∆∞ng ƒë·∫ßy ƒë·ªß
        - S·ª≠ d·ª•ng ti·∫øng Vi·ªát ƒë·ªÉ tr·∫£ l·ªùi
        - Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
        """
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω AI tuy·ªÉn d·ª•ng chuy√™n nghi·ªáp. Cung c·∫•p th√¥ng tin h·ªØu √≠ch d·ª±a tr√™n d·ªØ li·ªáu ƒë√°nh gi√° CV. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=800,
            temperature=0.7
        )
        
        return response.choices[0].message.content.strip()
        
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ph·∫£n h·ªìi chat: {e}")
        return f"Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n: {str(e)}"

def start_chat_evaluation_with_streaming(uploaded_files: List):
    """B·∫Øt ƒë·∫ßu ƒë√°nh gi√° v·ªõi t√≠ch h·ª£p c∆° s·ªü d·ªØ li·ªáu"""
    try:
        if not st.session_state.current_session_id:
            st.error("Kh√¥ng c√≥ phi√™n ho·∫°t ƒë·ªông. Vui l√≤ng t·∫°o phi√™n m·ªõi tr∆∞·ªõc.")
            return
        
        if not st.session_state.job_description:
            st.error("Vui l√≤ng ƒë·∫∑t m√¥ t·∫£ c√¥ng vi·ªác tr∆∞·ªõc.")
            return
        
        setup_directories()
        
        # L∆∞u t·ªáp
        saved_files = []
        for file in uploaded_files:
            file_path = save_uploaded_file(file)
            file_info = get_file_info(file, file_path)
            saved_files.append(file_info)
        
        # S·ª≠ d·ª•ng quy tr√¨nh l√†m vi·ªác ƒë√£ c·∫≠p nh·∫≠t v·ªõi t√≠ch h·ª£p c∆° s·ªü d·ªØ li·ªáu
        cv_workflow_instance = get_cached_workflow()
        
        with st.spinner("üöÄ ƒêang b·∫Øt ƒë·∫ßu quy tr√¨nh ƒë√°nh gi√° AI..."):
            result = cv_workflow_instance.run_evaluation(
                st.session_state.current_session_id,
                st.session_state.job_description,
                st.session_state.required_candidates,
                saved_files,
                st.session_state.position_title
            )
        
        if result["success"]:
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i phi√™n
            st.session_state.session_state = {
                "session_id": result["session_id"],
                "final_results": result.get("results", {}),
                "processing_status": result.get("status", "ho√†n th√†nh"),
                "job_description": st.session_state.job_description,
                "position_title": st.session_state.position_title,
                "required_candidates": st.session_state.required_candidates
            }
            
            st.success("‚úÖ ƒê√°nh gi√° ho√†n th√†nh th√†nh c√¥ng!")
            
        else:
            st.error(f"‚ùå ƒê√°nh gi√° th·∫•t b·∫°i: {result.get('error', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
            
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå L·ªói b·∫Øt ƒë·∫ßu ƒë√°nh gi√°: {str(e)}")
        logger.error(f"L·ªói b·∫Øt ƒë·∫ßu ƒë√°nh gi√° chat: {e}")

def render_detailed_results(results: Dict):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë√°nh gi√° chi ti·∫øt"""
    st.subheader("üìä K·∫øt qu·∫£ ƒë√°nh gi√° chi ti·∫øt")
    
    # Ch·ªâ s·ªë t√≥m t·∫Øt
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìã T·ªïng CV", results.get("total_cvs", 0))
    with col2:
        st.metric("‚úÖ ƒê·∫°t y√™u c·∫ßu", results.get("qualified_count", 0))
    with col3:
        st.metric("üìä ƒêi·ªÉm trung b√¨nh", f"{results.get('average_score', 0):.1f}/10")
    with col4:
        qualification_rate = results.get("summary", {}).get("qualification_rate", 0)
        st.metric("üìà T·ª∑ l·ªá ƒë·∫°t", f"{qualification_rate}%")
    
    # ·ª®ng vi√™n h√†ng ƒë·∫ßu
    st.subheader("üèÜ ·ª®ng vi√™n h√†ng ƒë·∫ßu")
    top_candidates = results.get("top_candidates", [])
    
    for i, candidate in enumerate(top_candidates, 1):
        with st.expander(f"#{i} - {candidate.get('filename', 'Kh√¥ng r√µ')} {format_score(candidate.get('score', 0))}"):
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.write(f"**ƒêi·ªÉm:** {candidate.get('score', 0):.1f}/10")
                status = "‚úÖ ƒê·∫°t y√™u c·∫ßu" if candidate.get('is_qualified', False) else "‚ùå Kh√¥ng ƒë·∫°t y√™u c·∫ßu"
                st.write(f"**Tr·∫°ng th√°i:** {status}")
            
            with col2:
                evaluation_text = candidate.get('evaluation_text', '')
                if evaluation_text:
                    try:
                        eval_data = json.loads(evaluation_text)
                        if isinstance(eval_data, dict):
                            st.write("**T√≥m t·∫Øt:**", eval_data.get('T·ªïng k·∫øt', 'N/A'))
                            
                            strengths = eval_data.get('ƒêi·ªÉm m·∫°nh', [])
                            if strengths:
                                st.write("**ƒêi·ªÉm m·∫°nh:**")
                                for strength in strengths[:3]:
                                    st.write(f"‚Ä¢ {strength}")
                                    
                            weaknesses = eval_data.get('ƒêi·ªÉm y·∫øu', [])
                            if weaknesses:
                                st.write("**ƒêi·ªÉm c·∫ßn c·∫£i thi·ªán:**")
                                for weakness in weaknesses[:2]:
                                    st.write(f"‚Ä¢ {weakness}")
                        else:
                            st.write(evaluation_text[:200] + "..." if len(evaluation_text) > 200 else evaluation_text)
                    except:
                        st.write(evaluation_text[:200] + "..." if len(evaluation_text) > 200 else evaluation_text)
    
    # Bi·ªÉu ƒë·ªì ph√¢n b·ªï ƒëi·ªÉm
    st.subheader("üìà Ph√¢n b·ªï ƒëi·ªÉm s·ªë")
    all_evaluations = results.get("all_evaluations", [])
    
    if all_evaluations:
        scores = [eval.get('score', 0) for eval in all_evaluations]
        
        # T·∫°o histogram ƒë∆°n gi·∫£n
        score_ranges = {
            "9.0-10.0": sum(1 for s in scores if 9 <= s <= 10),
            "8.0-8.9": sum(1 for s in scores if 8 <= s < 9),
            "7.0-7.9": sum(1 for s in scores if 7 <= s < 8),
            "6.0-6.9": sum(1 for s in scores if 6 <= s < 7),
            "5.0-5.9": sum(1 for s in scores if 5 <= s < 6),
            "0.0-4.9": sum(1 for s in scores if 0 <= s < 5)
        }
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.bar_chart(score_ranges)
        
        with col2:
            st.write("**Ph√¢n t√≠ch:**")
            excellent = score_ranges["9.0-10.0"]
            good = score_ranges["8.0-8.9"] + score_ranges["7.0-7.9"]
            average = score_ranges["6.0-6.9"] + score_ranges["5.0-5.9"]
            poor = score_ranges["0.0-4.9"]
            
            st.write(f"‚Ä¢ Xu·∫•t s·∫Øc (9-10): {excellent} ng∆∞·ªùi")
            st.write(f"‚Ä¢ T·ªët (7-8.9): {good} ng∆∞·ªùi")
            st.write(f"‚Ä¢ Trung b√¨nh (5-6.9): {average} ng∆∞·ªùi")
            st.write(f"‚Ä¢ Y·∫øu (0-4.9): {poor} ng∆∞·ªùi")

def render_ai_report():
    """Chat AI ƒë∆°n gi·∫£n v·ªÅ k·∫øt qu·∫£ thay v√¨ b√°o c√°o ch√≠nh th·ª©c"""
    if not st.session_state.session_state or not st.session_state.session_state.get('final_results'):
        st.error("Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë√°nh gi√°")
        return
    
    # K√≠ch ho·∫°t truy v·∫•n chat ƒë·ªÉ ph√¢n t√≠ch to√†n di·ªán
    comprehensive_query = "Vui l√≤ng cung c·∫•p ph√¢n t√≠ch to√†n di·ªán v·ªÅ t·∫•t c·∫£ k·∫øt qu·∫£ ƒë√°nh gi√° bao g·ªìm ·ª©ng vi√™n h√†ng ƒë·∫ßu, ƒë√°nh gi√° t·ªïng th·ªÉ v√† khuy·∫øn ngh·ªã tuy·ªÉn d·ª•ng."
    handle_chat_query(comprehensive_query)
    st.rerun()

def send_rejection_emails_manual():
    """K√≠ch ho·∫°t th·ªß c√¥ng cho email t·ª´ ch·ªëi"""
    if not st.session_state.session_state:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu phi√™n")
        return
    
    results = st.session_state.session_state.get('final_results', {})
    rejected_candidates = results.get('rejected_candidates', [])
    position_title = st.session_state.session_state.get('position_title', 'V·ªã tr√≠')
    
    if not rejected_candidates:
        st.info("Kh√¥ng c√≥ ·ª©ng vi√™n b·ªã t·ª´ ch·ªëi ƒë·ªÉ g·ª≠i email")
        return
    
    try:
        email_svc = get_cached_email_service()
        email_svc.send_rejection_emails(rejected_candidates, position_title)
        st.success(f"üìß ƒêang g·ª≠i email t·ª´ ch·ªëi ƒë·∫øn {len(rejected_candidates)} ·ª©ng vi√™n")
        
        cv_workflow.add_chat_message_to_session(
            st.session_state.current_session_id,
            'system',
            f"üìß ƒê√£ k√≠ch ho·∫°t th·ªß c√¥ng email t·ª´ ch·ªëi cho {len(rejected_candidates)} ·ª©ng vi√™n",
            'system'
        )
        
    except Exception as e:
        st.error(f"L·ªói g·ª≠i email t·ª´ ch·ªëi: {str(e)}")

def schedule_interview_emails_manual():
    """K√≠ch ho·∫°t th·ªß c√¥ng cho l·ªãch h·∫πn email ph·ªèng v·∫•n"""
    if not st.session_state.session_state:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu phi√™n")
        return
    
    results = st.session_state.session_state.get('final_results', {})
    qualified_candidates = results.get('qualified_candidates', [])
    position_title = st.session_state.session_state.get('position_title', 'V·ªã tr√≠')
    
    if not qualified_candidates:
        st.info("Kh√¥ng c√≥ ·ª©ng vi√™n ƒë·∫°t y√™u c·∫ßu ƒë·ªÉ l√™n l·ªãch ph·ªèng v·∫•n")
        return
    
    try:
        email_svc = get_cached_email_service()
        email_svc.schedule_interview_emails(qualified_candidates, position_title)
        st.success(f"‚è∞ ƒê√£ l√™n l·ªãch email ph·ªèng v·∫•n cho {len(qualified_candidates)} ·ª©ng vi√™n")
        
        cv_workflow.add_chat_message_to_session(
            st.session_state.current_session_id,
            'system',
            f"‚è∞ ƒê√£ l√™n l·ªãch th·ªß c√¥ng email ph·ªèng v·∫•n cho {len(qualified_candidates)} ·ª©ng vi√™n",
            'system'
        )
        
    except Exception as e:
        st.error(f"L·ªói l√™n l·ªãch email ph·ªèng v·∫•n: {str(e)}")

def export_results_json():
    """Xu·∫•t k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON"""
    if not st.session_state.session_state:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t")
        return
    
    try:
        data = {
            "session_id": st.session_state.current_session_id,
            "export_timestamp": datetime.now().isoformat(),
            "job_description": st.session_state.session_state.get('job_description', ''),
            "position_title": st.session_state.session_state.get('position_title', ''),
            "results": st.session_state.session_state.get('final_results', {}),
            "chat_history": st.session_state.chat_history if hasattr(st.session_state, 'chat_history') else []
        }
        
        json_str = json.dumps(data, ensure_ascii=False, indent=2)
        st.download_button(
            label="üíæ T·∫£i xu·ªëng JSON",
            data=json_str,
            file_name=f"danh_gia_cv_{st.session_state.current_session_id[:8]}.json",
            mime="application/json"
        )
        
    except Exception as e:
        st.error(f"L·ªói xu·∫•t JSON: {str(e)}")

def export_summary_csv():
    """Xu·∫•t t√≥m t·∫Øt d∆∞·ªõi d·∫°ng CSV"""
    if not st.session_state.session_state:
        st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t")
        return
    
    try:
        results = st.session_state.session_state.get('final_results', {})
        all_evaluations = results.get('all_evaluations', [])
        
        if not all_evaluations:
            st.error("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë√°nh gi√° ƒë·ªÉ xu·∫•t")
            return
        
        csv_lines = ["T√™n_file,ƒêi·ªÉm,ƒê·∫°t_y√™u_c·∫ßu,T√≥m_t·∫Øt"]
        
        for eval in all_evaluations:
            filename = eval.get('filename', '').replace(',', ';')
            score = eval.get('score', 0)
            qualified = "C√≥" if eval.get('is_qualified', False) else "Kh√¥ng"
            
            eval_text = eval.get('evaluation_text', '')
            summary = "N/A"
            
            try:
                eval_data = json.loads(eval_text)
                if isinstance(eval_data, dict):
                    summary = eval_data.get('T·ªïng k·∫øt', 'N/A').replace(',', ';')[:100]
            except:
                summary = eval_text[:100].replace(',', ';') if eval_text else "N/A"
            
            csv_lines.append(f"{filename},{score},{qualified},{summary}")
        
        csv_content = "\n".join(csv_lines)
        
        st.download_button(
            label="üìä T·∫£i xu·ªëng CSV",
            data=csv_content,
            file_name=f"tom_tat_cv_{st.session_state.current_session_id[:8]}.csv",
            mime="text/csv"
        )
        
    except Exception as e:
        st.error(f"L·ªói xu·∫•t CSV: {str(e)}")

def render_system_status():
    """Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng"""
    with st.sidebar:
        with st.expander("üîß Tr·∫°ng th√°i h·ªá th·ªëng"):
            st.write("**D·ªãch v·ª•:**")
            
            # Ki·ªÉm tra OpenAI
            try:
                gpt_evaluator = get_cached_gpt_evaluator()
                if gpt_evaluator:
                    st.write("‚úÖ OpenAI GPT-3.5")
                else:
                    st.write("‚ùå OpenAI GPT-3.5")
            except:
                st.write("‚ùå OpenAI GPT-3.5")
            
            # Ki·ªÉm tra Gemini
            try:
                if gemini_ocr:
                    st.write("‚úÖ Gemini OCR")
                else:
                    st.write("‚ùå Gemini OCR")
            except:
                st.write("‚ùå Gemini OCR")
            
            # Ki·ªÉm tra Email
            try:
                email_svc = get_cached_email_service()
                if email_svc.validate_config():
                    st.write("‚úÖ Email Service")
                else:
                    st.write("‚ö†Ô∏è Email (Ch∆∞a c·∫•u h√¨nh)")
            except:
                st.write("‚ùå Email Service")
            
            # Ki·ªÉm tra Database
            try:
                stats = db_manager.get_database_stats()
                if stats:
                    st.write("‚úÖ Database")
                else:
                    st.write("‚ùå Database")
            except:
                st.write("‚ùå Database")

def render_help_section():
    """Hi·ªÉn th·ªã ph·∫ßn tr·ª£ gi√∫p"""
    with st.sidebar:
        with st.expander("‚ùì Tr·ª£ gi√∫p"):
            st.markdown("""
            **üöÄ C√°ch s·ª≠ d·ª•ng:**
            1. T·∫°o phi√™n m·ªõi
            2. Nh·∫≠p m√¥ t·∫£ c√¥ng vi·ªác
            3. T·∫£i CV l√™n (PDF/H√¨nh ·∫£nh)
            4. Ch·ªù AI ƒë√°nh gi√°
            5. Chat ƒë·ªÉ ph√¢n t√≠ch th√™m
            
            **üìß H·ªó tr·ª£:**
            - Email: nguyentuongbachhy@gmail.com
            - Hotline: 0911076983
            
            **üîß X·ª≠ l√Ω s·ª± c·ªë:**
            - L√†m m·ªõi trang n·∫øu g·∫∑p l·ªói
            - Ki·ªÉm tra k·∫øt n·ªëi internet
            - ƒê·∫£m b·∫£o file CV < 10MB
            """)

def main():
    """H√†m ·ª©ng d·ª•ng ch√≠nh n√¢ng cao v·ªõi c∆° s·ªü d·ªØ li·ªáu"""
    initialize_session_state()
    setup_directories()
    
    # Logic t·ª± ƒë·ªông l√†m m·ªõi v·ªõi c∆° s·ªü d·ªØ li·ªáu
    if st.session_state.auto_refresh and st.session_state.current_session_id:
        if 'last_refresh' not in st.session_state:
            st.session_state.last_refresh = time.time()
        
        if time.time() - st.session_state.last_refresh > 30:
            session_state = cv_workflow.get_session_state(st.session_state.current_session_id)
            if session_state:
                st.session_state.session_state = session_state
            st.session_state.last_refresh = time.time()
            st.rerun()
    
    # B·ªë c·ª•c
    render_sidebar()
    render_system_status()  # Th√™m tr·∫°ng th√°i h·ªá th·ªëng
    render_help_section()   # Th√™m ph·∫ßn tr·ª£ gi√∫p
    render_header()
    render_chat_interface()

if __name__ == "__main__":
    main()