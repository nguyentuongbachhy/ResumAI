import os
import json
import logging
from typing import Dict, List, Optional
import time

from gemini_ocr import gemini_ocr
from gpt_evaluator import get_gpt_evaluator
from database import db_manager
from openai import OpenAI
from textwrap import dedent

logger = logging.getLogger(__name__)

class CVEvaluationWorkflow:
    """Quy tr√¨nh ƒë√°nh gi√° CV ƒë√£ c·∫≠p nh·∫≠t v·ªõi t√≠ch h·ª£p c∆° s·ªü d·ªØ li·ªáu"""
    
    def __init__(self):
        self.openai_client = self._init_openai_client()
        logger.info("Quy tr√¨nh ƒë√°nh gi√° CV ƒë√£ kh·ªüi t·∫°o v·ªõi t√≠ch h·ª£p c∆° s·ªü d·ªØ li·ªáu")
        
    def _init_openai_client(self):
        """Kh·ªüi t·∫°o OpenAI client"""
        try:
            openai_api_key = os.getenv("OPENAI_API_KEY")
            if not openai_api_key:
                logger.error("Kh√¥ng t√¨m th·∫•y kh√≥a API OpenAI")
                return None

            client = OpenAI(api_key=openai_api_key)
            logger.info("OpenAI client ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return client

        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o OpenAI: {e}")
            return None

    def _add_chat_message(self, session_id: str, message_type: str, content: str, sender: str = 'system'):
        """Helper ƒë·ªÉ th√™m tin nh·∫Øn chat v√†o c·∫£ session state v√† c∆° s·ªü d·ªØ li·ªáu"""
        try:
            # L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
            db_manager.save_chat_message(session_id, message_type, content, sender)
            
            # C≈©ng tr·∫£ v·ªÅ tin nh·∫Øn ƒë·ªÉ s·ª≠ d·ª•ng ngay l·∫≠p t·ª©c
            return {
                "type": message_type,
                "message": content,
                "sender": sender,
                "timestamp": time.time()
            }
            
        except Exception as e:
            logger.error(f"L·ªói th√™m tin nh·∫Øn chat: {e}")
            return None

    def _init_session(self, session_id: str, job_description: str, required_candidates: int, position_title: str = '') -> Dict:
        """Kh·ªüi t·∫°o phi√™n v·ªõi c∆° s·ªü d·ªØ li·ªáu v√† t·ª± ƒë·ªông t·∫°o session_title"""
        logger.info(f"ƒêang kh·ªüi t·∫°o phi√™n: {session_id}")
        
        try:
            # T·ª± ƒë·ªông t·∫°o session_title th√¥ng minh
            from utils import generate_smart_session_title
            session_title = generate_smart_session_title(position_title, job_description, required_candidates)
            
            # T·∫°o phi√™n trong c∆° s·ªü d·ªØ li·ªáu v·ªõi session_title
            success = db_manager.create_session(
                session_id, 
                job_description, 
                required_candidates, 
                position_title,
                session_title  # Th√™m session_title
            )
            
            if not success:
                raise Exception("Kh√¥ng th·ªÉ t·∫°o phi√™n trong c∆° s·ªü d·ªØ li·ªáu")
            
            # Th√™m tin nh·∫Øn chat ban ƒë·∫ßu v·ªõi session_title
            self._add_chat_message(
                session_id, 
                'system', 
                f"üéØ ƒê√£ t·∫°o phi√™n: **{session_title}**"
            )
            
            return {
                "session_id": session_id,
                "session_title": session_title,
                "status": "ƒë√£ kh·ªüi t·∫°o",
                "message": f"Phi√™n '{session_title}' ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng"
            }
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o phi√™n: {e}")
            return {
                "session_id": session_id,
                "status": "l·ªói",
                "error": str(e)
            }

    def _process_files(self, session_id: str, uploaded_files: List[Dict]) -> Dict:
        """X·ª≠ l√Ω c√°c file ƒë√£ t·∫£i l√™n v·ªõi l∆∞u tr·ªØ c∆° s·ªü d·ªØ li·ªáu"""
        logger.info("ƒêang x·ª≠ l√Ω c√°c file ƒë√£ t·∫£i l√™n...")
        
        try:
            self._add_chat_message(
                session_id, 
                'system', 
                f"üìÅ ƒêang x·ª≠ l√Ω {len(uploaded_files)} file ƒë√£ t·∫£i l√™n..."
            )

            file_ids = []
            
            for file_info in uploaded_files:
                # Th√™m file v√†o c∆° s·ªü d·ªØ li·ªáu
                file_id = db_manager.add_file(
                    session_id,
                    file_info["filename"],
                    file_info["path"],
                    file_info["type"],
                    file_info.get("size", 0)
                )
                
                if file_id > 0:
                    file_info["file_id"] = file_id
                    file_ids.append(file_id)
                    
                    logger.info(f"ƒê√£ th√™m file {file_info['filename']} v·ªõi ID {file_id}")
                else:
                    logger.error(f"Kh√¥ng th·ªÉ th√™m file {file_info['filename']} v√†o c∆° s·ªü d·ªØ li·ªáu")

            self._add_chat_message(
                session_id, 
                'system', 
                f"‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {len(file_ids)} file"
            )

            return {
                "status": "ƒë√£ x·ª≠ l√Ω file",
                "file_ids": file_ids,
                "processed_count": len(file_ids)
            }

        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω file: {e}")
            self._add_chat_message(session_id, 'error', f"‚ùå L·ªói x·ª≠ l√Ω file: {str(e)}")
            return {"status": "l·ªói", "error": str(e)}

    def _extract_text_with_gemini(self, session_id: str, uploaded_files: List[Dict]) -> Dict:
        """Tr√≠ch xu·∫•t vƒÉn b·∫£n v·ªõi c·∫≠p nh·∫≠t c∆° s·ªü d·ªØ li·ªáu"""
        logger.info("ƒêang tr√≠ch xu·∫•t vƒÉn b·∫£n v·ªõi Gemini OCR...")
        
        try:
            self._add_chat_message(
                session_id, 
                'system', 
                "üîç B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t vƒÉn b·∫£n v·ªõi Gemini OCR..."
            )

            extracted_data = []
            total_files = len(uploaded_files)
            
            for i, file_info in enumerate(uploaded_files, 1):
                filename = file_info["filename"]
                file_path = file_info["path"]
                file_id = file_info.get("file_id")
                
                self._add_chat_message(
                    session_id, 
                    'system', 
                    f"üîç [{i}/{total_files}] ƒêang tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ {filename}..."
                )

                # Tr√≠ch xu·∫•t vƒÉn b·∫£n b·∫±ng Gemini
                extracted_text = gemini_ocr.extract_text(file_path)

                if extracted_text and not extracted_text.startswith('L·ªói'):
                    # C·∫≠p nh·∫≠t c∆° s·ªü d·ªØ li·ªáu v·ªõi vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t
                    if file_id:
                        db_manager.update_file_extraction(file_id, extracted_text)
                    
                    extracted_data.append({
                        "file_id": file_id,
                        "filename": filename,
                        "extracted_text": extracted_text
                    })
                    
                    logger.info(f"ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng vƒÉn b·∫£n t·ª´ {filename}")
                else:
                    logger.warning(f"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ {filename}")
                    self._add_chat_message(
                        session_id, 
                        'error', 
                        f"‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ {filename}"
                    )

            self._add_chat_message(
                session_id, 
                'system', 
                f"‚úÖ Ho√†n th√†nh tr√≠ch xu·∫•t vƒÉn b·∫£n cho {len(extracted_data)}/{total_files} file"
            )

            return {
                "status": "ƒë√£ tr√≠ch xu·∫•t vƒÉn b·∫£n",
                "extracted_data": extracted_data,
                "success_count": len(extracted_data)
            }

        except Exception as e:
            logger.error(f"L·ªói tr√≠ch xu·∫•t vƒÉn b·∫£n: {e}")
            self._add_chat_message(session_id, 'error', f"‚ùå Tr√≠ch xu·∫•t vƒÉn b·∫£n th·∫•t b·∫°i: {str(e)}")
            return {"status": "l·ªói", "error": str(e)}

    def _evaluate_with_gpt(self, session_id: str, job_description: str, extracted_data: List[Dict]) -> Dict:
        """ƒê√°nh gi√° CV v·ªõi GPT v√† l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu"""
        logger.info("ƒêang ƒë√°nh gi√° CV v·ªõi GPT-3.5-turbo...")
        
        try:
            self._add_chat_message(
                session_id, 
                'system', 
                "ü§ñ B·∫Øt ƒë·∫ßu ƒë√°nh gi√° AI v·ªõi GPT-3.5-turbo..."
            )

            gpt_evaluator = get_gpt_evaluator()
            evaluations = []
            total_cvs = len(extracted_data)
            
            for i, data in enumerate(extracted_data, 1):
                filename = data["filename"]
                extracted_text = data["extracted_text"]
                file_id = data["file_id"]
                
                self._add_chat_message(
                    session_id, 
                    'system', 
                    f"ü§ñ [{i}/{total_cvs}] ƒêang ƒë√°nh gi√° {filename}..."
                )

                # ƒê√°nh gi√° v·ªõi GPT
                gpt_response = gpt_evaluator.evaluate_cv(job_description, extracted_text)
                parsed_evaluation = gpt_evaluator.extract_json_from_response(gpt_response)

                if parsed_evaluation:
                    score = parsed_evaluation.get("ƒêi·ªÉm t·ªïng", 0)
                    is_qualified = parsed_evaluation.get("Ph√π h·ª£p", "kh√¥ng ph√π h·ª£p") == "ph√π h·ª£p"
                    
                    # L∆∞u ƒë√°nh gi√° v√†o c∆° s·ªü d·ªØ li·ªáu
                    db_manager.add_evaluation(
                        session_id,
                        file_id,
                        score,
                        json.dumps(parsed_evaluation, ensure_ascii=False),
                        is_qualified
                    )
                    
                    evaluation_result = {
                        "file_id": file_id,
                        "filename": filename,
                        "score": score,
                        "is_qualified": is_qualified,
                        "evaluation_data": parsed_evaluation,
                        "extracted_text": extracted_text
                    }
                    
                    evaluations.append(evaluation_result)
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ng c√° nh√¢n
                    status = "‚úÖ ƒê·∫°t y√™u c·∫ßu" if is_qualified else "‚ùå Kh√¥ng ƒë·∫°t y√™u c·∫ßu"
                    self._add_chat_message(
                        session_id, 
                        'result', 
                        f"üìä {filename}: {score:.1f}/10 - {status}"
                    )
                    
                else:
                    logger.warning(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch ƒë√°nh gi√° cho {filename}")
                    evaluations.append({
                        "file_id": file_id,
                        "filename": filename,
                        "score": 0,
                        "is_qualified": False,
                        "evaluation_data": None,
                        "extracted_text": extracted_text
                    })

            self._add_chat_message(
                session_id, 
                'system', 
                f"‚úÖ Ho√†n th√†nh ƒë√°nh gi√° AI cho {len(evaluations)} CV"
            )

            return {
                "status": "ƒë√£ ƒë√°nh gi√° cv",
                "evaluations": evaluations,
                "total_evaluated": len(evaluations)
            }

        except Exception as e:
            logger.error(f"L·ªói ƒë√°nh gi√° v·ªõi GPT: {e}")
            self._add_chat_message(session_id, 'error', f"‚ùå ƒê√°nh gi√° AI th·∫•t b·∫°i: {str(e)}")
            return {"status": "l·ªói", "error": str(e)}

    def _finalize_results(self, session_id: str, evaluations: List[Dict], required_candidates: int) -> Dict:
        """Ho√†n thi·ªán k·∫øt qu·∫£ v·ªõi t√≥m t·∫Øt c∆° s·ªü d·ªØ li·ªáu - FIXED ƒë·ªÉ merge t·∫•t c·∫£ evaluations"""
        logger.info("ƒêang ho√†n thi·ªán k·∫øt qu·∫£ ƒë√°nh gi√°...")

        try:
            # **FIX: L·∫•y T·∫§T C·∫¢ evaluations trong session t·ª´ database**
            all_session_results = db_manager.get_session_results(session_id)
            
            # Convert database results to evaluation format
            all_evaluations = []
            for result in all_session_results:
                evaluation = {
                    "filename": result.get('filename', ''),
                    "score": result.get('score', 0),
                    "is_qualified": result.get('is_qualified', False),
                    "evaluation_text": result.get('evaluation_json', ''),
                    "extracted_text": result.get('extracted_text', ''),
                    "file_path": result.get('file_path', ''),
                    "evaluation_timestamp": result.get('evaluation_timestamp', '')
                }
                all_evaluations.append(evaluation)
            
            # **FIX: N·∫øu kh√¥ng c√≥ evaluations t·ª´ database, s·ª≠ d·ª•ng evaluations hi·ªán t·∫°i**
            if not all_evaluations:
                all_evaluations = evaluations
            
            # S·∫Øp x·∫øp ƒë√°nh gi√° theo ƒëi·ªÉm
            sorted_evaluations = sorted(all_evaluations, key=lambda x: x["score"], reverse=True)
            
            # T√≠nh to√°n th·ªëng k√™ cho T·∫§T C·∫¢ evaluations
            total_cvs = len(sorted_evaluations)
            qualified_count = sum(1 for e in sorted_evaluations if e["is_qualified"])
            avg_score = sum(e["score"] for e in sorted_evaluations) / total_cvs if total_cvs > 0 else 0
            
            # T·∫°o c·∫•u tr√∫c k·∫øt qu·∫£ cu·ªëi c√πng
            final_results = {
                "total_cvs": total_cvs,
                "qualified_count": qualified_count,
                "average_score": round(avg_score, 2),
                "top_candidates": sorted_evaluations[:required_candidates],
                "all_evaluations": sorted_evaluations,
                "summary": {
                    "best_score": sorted_evaluations[0]["score"] if sorted_evaluations else 0,
                    "worst_score": sorted_evaluations[-1]["score"] if sorted_evaluations else 0,
                    "qualification_rate": round(qualified_count / total_cvs * 100, 1) if total_cvs > 0 else 0
                },
                "qualified_candidates": [e for e in sorted_evaluations if e["is_qualified"]],
                "rejected_candidates": [e for e in sorted_evaluations if not e["is_qualified"]]
            }

            # Th√™m tin nh·∫Øn t√≥m t·∫Øt v·ªõi s·ªë li·ªáu ch√≠nh x√°c
            self._add_chat_message(
                session_id, 
                'summary', 
                f"üìä Ho√†n th√†nh ƒë√°nh gi√°: {qualified_count}/{total_cvs} ƒë·∫°t y√™u c·∫ßu (Trung b√¨nh: {avg_score:.1f}/10)"
            )

            logger.info(f"Finalized results: {total_cvs} total CVs, {qualified_count} qualified")

            return {
                "status": "ƒë√£ ho√†n thi·ªán k·∫øt qu·∫£",
                "final_results": final_results
            }

        except Exception as e:
            logger.error(f"L·ªói ho√†n thi·ªán k·∫øt qu·∫£: {e}")
            self._add_chat_message(session_id, 'error', f"‚ùå Kh√¥ng th·ªÉ ho√†n thi·ªán k·∫øt qu·∫£: {str(e)}")
            return {"status": "l·ªói", "error": str(e)}

    def run_evaluation(self, session_id: str, job_description: str, required_candidates: int, 
                  uploaded_files: List[Dict], position_title: str = None) -> Dict:
        """Ch·∫°y quy tr√¨nh ƒë√°nh gi√° ho√†n ch·ªânh v·ªõi t√≠ch h·ª£p c∆° s·ªü d·ªØ li·ªáu - FIXED"""
        try:
            logger.info(f"B·∫Øt ƒë·∫ßu quy tr√¨nh ƒë√°nh gi√° cho phi√™n {session_id}")
            
            # B∆∞·ªõc 1: Kh·ªüi t·∫°o phi√™n (ch·ªâ khi ch∆∞a t·ªìn t·∫°i)
            existing_session = db_manager.get_session(session_id)
            if not existing_session:
                init_result = self._init_session(session_id, job_description, required_candidates, position_title)
                if init_result["status"] == "l·ªói":
                    return {"success": False, "error": init_result["error"]}
            
            # B∆∞·ªõc 2: X·ª≠ l√Ω file
            process_result = self._process_files(session_id, uploaded_files)
            if process_result["status"] == "l·ªói":
                return {"success": False, "error": process_result["error"]}
            
            # B∆∞·ªõc 3: Tr√≠ch xu·∫•t vƒÉn b·∫£n
            extract_result = self._extract_text_with_gemini(session_id, uploaded_files)
            if extract_result["status"] == "l·ªói":
                return {"success": False, "error": extract_result["error"]}
            
            # B∆∞·ªõc 4: ƒê√°nh gi√° v·ªõi GPT
            eval_result = self._evaluate_with_gpt(session_id, job_description, extract_result["extracted_data"])
            if eval_result["status"] == "l·ªói":
                return {"success": False, "error": eval_result["error"]}
            
            # B∆∞·ªõc 5: Ho√†n thi·ªán k·∫øt qu·∫£ (FIXED - s·∫Ω merge v·ªõi evaluations c√≥ s·∫µn)
            final_result = self._finalize_results(session_id, eval_result["evaluations"], required_candidates)
            if final_result["status"] == "l·ªói":
                return {"success": False, "error": final_result["error"]}

            db_manager._update_session_analytics_comprehensive(session_id)

            # L·∫•y l·ªãch s·ª≠ chat t·ª´ c∆° s·ªü d·ªØ li·ªáu
            chat_history = db_manager.get_chat_history(session_id)

            return {
                "success": True,
                "session_id": session_id,
                "results": final_result["final_results"],
                "chat_history": chat_history,
                "status": "ho√†n th√†nh"
            }

        except Exception as e:
            logger.error(f"L·ªói ch·∫°y quy tr√¨nh ƒë√°nh gi√°: {e}")
            self._add_chat_message(session_id, 'error', f"‚ùå Quy tr√¨nh th·∫•t b·∫°i: {str(e)}")
            return {"success": False, "error": str(e)}

    def get_session_state(self, session_id: str) -> Optional[Dict]:
        """L·∫•y tr·∫°ng th√°i phi√™n t·ª´ c∆° s·ªü d·ªØ li·ªáu v·ªõi session_title"""
        try:
            # L·∫•y th√¥ng tin phi√™n
            session_info = db_manager.get_session(session_id)
            if not session_info:
                return None
            
            # L·∫•y l·ªãch s·ª≠ chat
            chat_history = db_manager.get_chat_history(session_id)
            
            # L·∫•y k·∫øt qu·∫£ ƒë√°nh gi√°
            results = db_manager.get_session_results(session_id)
            
            # L·∫•y ph√¢n t√≠ch phi√™n
            analytics = db_manager.get_session_analytics(session_id)
            
            # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ sang ƒë·ªãnh d·∫°ng mong ƒë·ª£i
            if results:
                # Sort by score
                sorted_results = sorted(results, key=lambda x: x.get('score', 0), reverse=True)
                
                total_cvs = len(sorted_results)
                qualified_count = sum(1 for r in sorted_results if r.get('is_qualified', False))
                avg_score = sum(r.get('score', 0) for r in sorted_results) / total_cvs if total_cvs > 0 else 0
                
                # Convert to expected format
                converted_evaluations = []
                for result in sorted_results:
                    converted_evaluations.append({
                        "filename": result.get('filename', ''),
                        "score": result.get('score', 0),
                        "is_qualified": result.get('is_qualified', False),
                        "evaluation_text": result.get('evaluation_json', ''),
                        "extracted_text": result.get('extracted_text', '')
                    })
                
                final_results = {
                    "total_cvs": total_cvs,
                    "qualified_count": qualified_count,
                    "average_score": round(avg_score, 2),
                    "all_evaluations": converted_evaluations,
                    "top_candidates": converted_evaluations[:session_info.get('required_candidates', 3)],
                    "summary": {
                        "best_score": sorted_results[0].get('score', 0) if sorted_results else 0,
                        "worst_score": sorted_results[-1].get('score', 0) if sorted_results else 0,
                        "qualification_rate": round(qualified_count / total_cvs * 100, 1) if total_cvs > 0 else 0
                    },
                    "qualified_candidates": [r for r in converted_evaluations if r["is_qualified"]],
                    "rejected_candidates": [r for r in converted_evaluations if not r["is_qualified"]]
                }
            else:
                final_results = {}
            
            return {
                "session_id": session_id,
                "session_title": session_info.get('session_title', ''),  # Th√™m session_title
                "job_description": session_info.get('job_description', ''),
                "position_title": session_info.get('position_title', ''),
                "required_candidates": session_info.get('required_candidates', 3),
                "final_results": final_results,
                "chat_history": chat_history,
                "processing_status": session_info.get('status', 'ƒëang ho·∫°t ƒë·ªông'),
                "analytics": analytics
            }
            
        except Exception as e:
            logger.error(f"L·ªói l·∫•y tr·∫°ng th√°i phi√™n: {e}")
            return None

    def update_session_title(self, session_id: str, new_title: str) -> bool:
        """C·∫≠p nh·∫≠t session title"""
        try:
            success = db_manager.update_session_title(session_id, new_title)
            if success:
                self._add_chat_message(
                    session_id,
                    'system',
                    f"üìù ƒê√£ ƒë·ªïi t√™n phi√™n th√†nh: **{new_title}**"
                )
            return success
        except Exception as e:
            logger.error(f"L·ªói c·∫≠p nh·∫≠t session title: {e}")
            return False

    def get_session_display_info(self, session_id: str) -> Dict:
        """L·∫•y th√¥ng tin hi·ªÉn th·ªã cho session"""
        try:
            session_state = self.get_session_state(session_id)
            if not session_state:
                return {
                    "display_name": f"Phi√™n {session_id[:8]}...",
                    "session_title": "",
                    "position_title": "",
                    "created_at": "",
                    "status": "unknown"
                }
            
            # T·∫°o display name t·ª´ session_title ho·∫∑c fallback
            session_title = session_state.get('session_title', '')
            position_title = session_state.get('position_title', '')
            
            if session_title:
                display_name = session_title
            elif position_title:
                display_name = f"{position_title} - {session_id[:8]}"
            else:
                display_name = f"Phi√™n {session_id[:8]}..."
            
            return {
                "display_name": display_name,
                "session_title": session_title,
                "position_title": position_title,
                "created_at": session_state.get('analytics', {}).get('last_activity_timestamp', ''),
                "status": session_state.get('processing_status', 'active'),
                "total_cvs": session_state.get('final_results', {}).get('total_cvs', 0),
                "qualified_count": session_state.get('final_results', {}).get('qualified_count', 0)
            }
            
        except Exception as e:
            logger.error(f"L·ªói l·∫•y session display info: {e}")
            return {
                "display_name": f"Phi√™n {session_id[:8]}...",
                "session_title": "",
                "position_title": "",
                "created_at": "",
                "status": "error"
            }

    def generate_session_title_suggestions(self, job_description: str, position_title: str = '') -> List[str]:
        """T·∫°o g·ª£i √Ω title cho session"""
        try:
            from utils import create_session_title_suggestions
            return create_session_title_suggestions(job_description)
        except Exception as e:
            logger.error(f"L·ªói t·∫°o session title suggestions: {e}")
            return ["Tuy·ªÉn d·ª•ng m·ªõi", "Phi√™n tuy·ªÉn d·ª•ng", "T√¨m ·ª©ng vi√™n"]

    def search_sessions(self, search_term: str) -> List[Dict]:
        """T√¨m ki·∫øm sessions theo title v√† position"""
        try:
            return db_manager.search_sessions_by_title(search_term)
        except Exception as e:
            logger.error(f"L·ªói t√¨m ki·∫øm sessions: {e}")
            return []

    def add_chat_message_to_session(self, session_id: str, message_type: str, content: str, sender: str = 'user'):
        """Th√™m tin nh·∫Øn chat v√†o phi√™n (ƒë·ªÉ s·ª≠ d·ª•ng t·ª´ b√™n ngo√†i)"""
        return self._add_chat_message(session_id, message_type, content, sender)

    def get_session_chat_history(self, session_id: str) -> List[Dict]:
        """L·∫•y l·ªãch s·ª≠ chat cho phi√™n"""
        return db_manager.get_chat_history(session_id)

    def clear_session_chat(self, session_id: str) -> bool:
        """X√≥a l·ªãch s·ª≠ chat cho phi√™n"""
        return db_manager.clear_chat_history(session_id)

    def generate_comprehensive_report(self, session_id: str) -> str:
        """T·∫°o b√°o c√°o to√†n di·ªán cho phi√™n"""
        try:
            session_state = self.get_session_state(session_id)
            if not session_state:
                return "Kh√¥ng th·ªÉ t·∫°o b√°o c√°o: Kh√¥ng t√¨m th·∫•y phi√™n"
            
            results = session_state.get('final_results', {})
            if not results:
                return "Kh√¥ng th·ªÉ t·∫°o b√°o c√°o: Ch∆∞a c√≥ k·∫øt qu·∫£ ƒë√°nh gi√°"
            
            # T·∫°o b√°o c√°o chi ti·∫øt
            report = dedent(f"""\
                üìä B√ÅO C√ÅO ƒê√ÅNH GI√Å CV TO√ÄN DI·ªÜN
                ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

                üéØ TH√îNG TIN PHI√äN
                ‚Ä¢ ID Phi√™n: {session_id}
                ‚Ä¢ V·ªã tr√≠ tuy·ªÉn d·ª•ng: {session_state.get('position_title', 'N/A')}
                ‚Ä¢ S·ªë ·ª©ng vi√™n c·∫ßn tuy·ªÉn: {session_state.get('required_candidates', 'N/A')}
                ‚Ä¢ Tr·∫°ng th√°i: {session_state.get('processing_status', 'N/A')}

                üìà TH·ªêNG K√ä T·ªîNG QUAN
                ‚Ä¢ T·ªïng s·ªë CV: {results.get('total_cvs', 0)}
                ‚Ä¢ ·ª®ng vi√™n ƒë·∫°t y√™u c·∫ßu: {results.get('qualified_count', 0)}
                ‚Ä¢ T·ª∑ l·ªá ƒë·∫°t y√™u c·∫ßu: {results.get('summary', {}).get('qualification_rate', 0)}%
                ‚Ä¢ ƒêi·ªÉm trung b√¨nh: {results.get('average_score', 0):.2f}/10
                ‚Ä¢ ƒêi·ªÉm cao nh·∫•t: {results.get('summary', {}).get('best_score', 0):.2f}/10
                ‚Ä¢ ƒêi·ªÉm th·∫•p nh·∫•t: {results.get('summary', {}).get('worst_score', 0):.2f}/10

                üèÜ TOP ·ª®NG VI√äN
            """)
            
            top_candidates = results.get('top_candidates', [])
            for i, candidate in enumerate(top_candidates[:5], 1):
                status = "‚úÖ ƒê·∫°t" if candidate.get('is_qualified', False) else "‚ùå Kh√¥ng ƒë·∫°t"
                report += f"{i}. {candidate.get('filename', 'N/A')} - {candidate.get('score', 0):.1f}/10 ({status})\n"
            
            report += dedent(f"""\
                ‚úÖ ·ª®NG VI√äN ƒê·∫†T Y√äU C·∫¶U ({results.get('qualified_count', 0)} ng∆∞·ªùi)
            """)
            qualified = results.get('qualified_candidates', [])
            for i, candidate in enumerate(qualified, 1):
                report += f"{i}. {candidate.get('filename', 'N/A')} - {candidate.get('score', 0):.1f}/10\n"
            
            report += dedent(f"""\
                ‚ùå ·ª®NG VI√äN KH√îNG ƒê·∫†T Y√äU C·∫¶U ({len(results.get('rejected_candidates', []))} ng∆∞·ªùi)
            """)
            rejected = results.get('rejected_candidates', [])
            for i, candidate in enumerate(rejected[:10], 1):  # Gi·ªõi h·∫°n 10 ng∆∞·ªùi ƒë·∫ßu
                report += f"{i}. {candidate.get('filename', 'N/A')} - {candidate.get('score', 0):.1f}/10\n"
            
            if len(rejected) > 10:
                report += f"... v√† {len(rejected) - 10} ·ª©ng vi√™n kh√°c\n"
            
            # Th√™m ph√¢n t√≠ch t·ª´ analytics n·∫øu c√≥
            analytics = session_state.get('analytics', {})
            if analytics:
                report += dedent(f"""\
                    üìä PH√ÇN T√çCH CHI TI·∫æT
                    ‚Ä¢ T·ªïng file ƒë√£ t·∫£i: {analytics.get('total_files_uploaded', 0)}
                    ‚Ä¢ File ƒë√£ x·ª≠ l√Ω: {analytics.get('total_files_processed', 0)}
                    ‚Ä¢ Tin nh·∫Øn chat: {analytics.get('total_chat_messages', 0)}
                    ‚Ä¢ Ho·∫°t ƒë·ªông cu·ªëi: {analytics.get('last_activity_timestamp', 'N/A')}
                """)

            report += dedent(f"""\
                üí° KHUY·∫æN NGH·ªä TUY·ªÇN D·ª§NG
            """)
            # T·∫°o khuy·∫øn ngh·ªã d·ª±a tr√™n d·ªØ li·ªáu
            qualified_rate = results.get('summary', {}).get('qualification_rate', 0)
            avg_score = results.get('average_score', 0)
            
            if qualified_rate >= 50:
                report += "‚Ä¢ Ch·∫•t l∆∞·ª£ng ·ª©ng vi√™n t·ªët, c√≥ nhi·ªÅu l·ª±a ch·ªçn ph√π h·ª£p\n"
                report += "‚Ä¢ C√≥ th·ªÉ n√¢ng cao ti√™u ch√≠ ƒë·ªÉ l·ªçc t·ªët h∆°n\n"
            elif qualified_rate >= 20:
                report += "‚Ä¢ Ch·∫•t l∆∞·ª£ng ·ª©ng vi√™n trung b√¨nh, c·∫ßn ph·ªèng v·∫•n k·ªπ\n"
                report += "‚Ä¢ T·∫≠p trung v√†o nh·ªØng ·ª©ng vi√™n c√≥ ƒëi·ªÉm cao nh·∫•t\n"
            else:
                report += "‚Ä¢ √çt ·ª©ng vi√™n ƒë·∫°t y√™u c·∫ßu, c·∫ßn xem x√©t gi·∫£m ti√™u ch√≠\n"
                report += "‚Ä¢ M·ªü r·ªông ph·∫°m vi t√¨m ki·∫øm ·ª©ng vi√™n\n"
            
            if avg_score >= 7:
                report += "‚Ä¢ Ch·∫•t l∆∞·ª£ng ·ª©ng vi√™n t·ªïng th·ªÉ t·ªët\n"
            elif avg_score >= 5:
                report += "‚Ä¢ Ch·∫•t l∆∞·ª£ng ·ª©ng vi√™n ·ªü m·ª©c trung b√¨nh\n"
            else:
                report += "‚Ä¢ C·∫ßn c·∫£i thi·ªán ngu·ªìn ·ª©ng vi√™n\n"
            
            report += dedent(f"""\
                ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                üéØ B√°o c√°o ƒë∆∞·ª£c t·∫°o b·ªüi CV Evaluator AI
                ‚è∞ Th·ªùi gian: {time.strftime('%d/%m/%Y %H:%M:%S')}
            """)
            
            return report
            
        except Exception as e:
            logger.error(f"L·ªói t·∫°o b√°o c√°o to√†n di·ªán: {e}")
            return f"L·ªói t·∫°o b√°o c√°o: {str(e)}"

    def export_session_data(self, session_id: str) -> Dict:
        """Xu·∫•t d·ªØ li·ªáu phi√™n ƒë·ªÉ backup ho·∫∑c di chuy·ªÉn"""
        try:
            session_state = self.get_session_state(session_id)
            if not session_state:
                return {"success": False, "error": "Kh√¥ng t√¨m th·∫•y phi√™n"}
            
            # L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu li√™n quan
            files = db_manager.get_session_files(session_id)
            chat_history = db_manager.get_chat_history(session_id)
            analytics = db_manager.get_session_analytics(session_id)
            
            export_data = {
                "session_info": session_state,
                "files": files,
                "chat_history": chat_history,
                "analytics": analytics,
                "export_timestamp": time.time(),
                "export_version": "1.0"
            }
            
            return {"success": True, "data": export_data}
            
        except Exception as e:
            logger.error(f"L·ªói xu·∫•t d·ªØ li·ªáu phi√™n: {e}")
            return {"success": False, "error": str(e)}

    def get_session_statistics(self) -> Dict:
        """L·∫•y th·ªëng k√™ t·ªïng quan c·ªßa t·∫•t c·∫£ phi√™n"""
        try:
            stats = db_manager.get_database_stats()
            sessions = db_manager.get_all_sessions()
            
            # T√≠nh to√°n th√™m
            active_sessions = len([s for s in sessions if 'completed' not in s.get('status', '')])
            
            return {
                "total_sessions": stats.get('total_sessions', 0),
                "active_sessions": active_sessions,
                "total_cvs_processed": stats.get('total_cvs', 0),
                "total_evaluations": stats.get('total_evaluations', 0),
                "global_average_score": stats.get('average_score', 0),
                "recent_sessions": sessions[:10]  # 10 phi√™n g·∫ßn nh·∫•t
            }
            
        except Exception as e:
            logger.error(f"L·ªói l·∫•y th·ªëng k√™ phi√™n: {e}")
            return {"error": str(e)}

# Instance to√†n c·ª•c
_cv_workflow = None

def get_cv_workflow():
    """L·∫•y workflow instance (singleton)"""
    global _cv_workflow
    if _cv_workflow is None:
        _cv_workflow = CVEvaluationWorkflow()
    return _cv_workflow

cv_workflow = get_cv_workflow()